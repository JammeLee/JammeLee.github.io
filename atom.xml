<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jamme</title>
  
  <subtitle>This is Jamme&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.jammelee.top/"/>
  <updated>2021-07-27T16:42:02.687Z</updated>
  <id>http://blog.jammelee.top/</id>
  
  <author>
    <name>Jamme</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity的渲染路径（上）</title>
    <link href="http://blog.jammelee.top/2021/07/28/ComputerGraphics/%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84/"/>
    <id>http://blog.jammelee.top/2021/07/28/ComputerGraphics/%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84/</id>
    <published>2021-07-28T02:35:25.000Z</published>
    <updated>2021-07-27T16:42:02.687Z</updated>
    
    <content type="html"><![CDATA[<p>在Unity里，<strong>渲染路径（Rendering Path）</strong>决定了光照是如何应用到Unity Shader中的。因此，如果要和光源打交道，我们需要为每个Pass指定它使用的渲染路径，只有这样才能让Unity知道我们想要使用哪种渲染路径，从而把光源和处理后的光照信息都放在一些内置变量中，供我们访问。也就是说，只有为Shader正确地选择和设置了需要的渲染路径，该Shader的光照计算才能被正确执行。</p><p>大多数情况下，一个项目只使用一种渲染路径，因此我们可以为整个项目设置渲染时的渲染路径。通过<code>Edit</code>-&gt;<code>Project Settings</code>-&gt;<code>Graphics</code>-&gt;<code>Tier Settings</code>-&gt;<code>Rendering Path</code>中选择项目所需的渲染路径。默认情况下，该选项为前向渲染路径。如图：</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20210726194345.png" alt="img"></p><p>但有时我们希望可以使用多个渲染路径，例如相机A渲染的物体使用前向渲染路径，而相机B渲染的物体使用延迟渲染路径。这时，我们可以通过在每个相机的渲染路径设置中设置该相机使用的渲染路径，来覆盖Graphics Settings中的设置。如图：</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20210726194633.png" alt="img"></p><p>上面的设置中，如果选择了Use Graphics Settings，那么这个相机就会使用Graphics Settings中的设置，否则就会覆盖掉Graphics Settings中的设置。需要注意的是，如果当前的显卡并不支持所选的渲染路径，Unity会自动使用更低一级的渲染路径。例如，如果一个GPU不支持延迟渲染，那么Unity就会使用前向渲染。</p><p>完成了上面的设置后，我们就可以在每个Pass中使用标签来指定该Pass使用的渲染路径。这是通过设置Pass的<strong>LightMode</strong>标签实现的。不同类型的渲染路径可能会包含多种标签设置。</p><blockquote><p>Pass{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tags{ “LightMode” = “ForwardBase”}</p></blockquote><p>上面的代码告诉Unity，该Pass使用前向渲染路径中的<strong>ForwardBase</strong>路径。而前向渲染路径还有一种路径叫做<strong>ForwardAdd</strong>。下表给出了Pass的LightMode标签支持的渲染路径设置选项。</p><div class="table-container"><table><thead><tr><th style="text-align:center">标签名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Always</td><td style="text-align:center">不管使用哪种渲染路径，该Pass总是会被渲染，但不会计算任何光照</td></tr><tr><td style="text-align:center">ForwardBase</td><td style="text-align:center">用于<strong>前向渲染</strong>。该Pass会计算环境光、最重要的平行光、逐顶点/SH光源和Lightmaps</td></tr><tr><td style="text-align:center">ForwardAdd</td><td style="text-align:center">用于<strong>前向渲染</strong>。该Pass会计算额外的逐像素光源，每个Pass对应一个光源。</td></tr><tr><td style="text-align:center">Deferred</td><td style="text-align:center">用于<strong>延迟渲染</strong>。该Pass会渲染G缓冲（G-buffer）。</td></tr><tr><td style="text-align:center">ShadowCaster</td><td style="text-align:center">把物体的深度信息渲染到阴影映射纹理（shadowmap）或一张深度纹理中</td></tr><tr><td style="text-align:center">MotionVectors</td><td style="text-align:center">用于计算每个物体的运动响亮</td></tr><tr><td style="text-align:center">PrepassBase</td><td style="text-align:center">用于<strong>遗留的延迟渲染</strong>。该Pass会渲染法线和高光反射的指数部分。</td></tr><tr><td style="text-align:center">PrepassFinal</td><td style="text-align:center">用于<strong>遗留的延迟渲染</strong>。该Pass通过合并纹理、光照和自发光来渲染得到最后的颜色。</td></tr><tr><td style="text-align:center">Vertex</td><td style="text-align:center">用于<strong>遗留的顶点照明渲染</strong>。当物体未烘焙光照贴图时。应用所有顶点光源。</td></tr><tr><td style="text-align:center">VertexLMRGBM</td><td style="text-align:center">用于<strong>遗留的顶点照明渲染</strong>。当物体烘焙光照贴图时，并且在光照贴图采用RGBM编码的平台（PC和控制台）上。</td></tr><tr><td style="text-align:center">VertexLM</td><td style="text-align:center">用于<strong>遗留的顶点照明渲染</strong>。当物体烘焙光照贴图时，并且在光照贴图采用双LDR编码（移动平台）的平台上。</td></tr><tr><td style="text-align:center">Meta</td><td style="text-align:center">此Pass不用于常规渲染，仅用于光照贴图烘焙或实时全局光照。更多有关信息，请参阅<a href="https://docs.unity3d.com/Manual/MetaPass.html">光照贴图和Meta Pass标签</a></td></tr></tbody></table></div><p>如果一个Pass没有指定任何渲染路径会有什么问题么？</p><p>通俗讲，指定渲染路径是我们和Unity的底层渲染引擎的一次重要沟通。例如，如果我们为一个Pass设置了前向渲染路径的标签，就相当于告诉Unity，我们准备使用前向渲染了。那么Unity就会把光照属性按照前向渲染的流程准备好。随后我们可以通过Unity内置的光照变量来访问这些属性值。如果我们没有指定任何的渲染路径（实际上，Unity中如果使用了前向渲染，又没有为Pass指定任何前向渲染适合的标签，就会被当成一个和顶点照明渲染路径相同的Pass），那么一些光照变量很可能不会被正确赋值，我们计算出的效果也就很有可能是错误的。</p><h2 id="前向渲染路径"><a href="#前向渲染路径" class="headerlink" title="前向渲染路径"></a>前向渲染路径</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>每进行一次完整的前向渲染，我们需要渲染该对象的渲染图元，并计算两个缓冲区的信息：一个是颜色缓冲区，一个是深度缓冲区。利用深度缓冲区来决定一个片元是否可见，如果可见，那么就刷新颜色缓冲区中的值。用伪代码来描述一下前向渲染的大概过程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pass &#123;</span><br><span class="line">    for (each primitive in this model) &#123;</span><br><span class="line">        if (failed in depth test) &#123;</span><br><span class="line">            //如果没有通过深度测试，说明该片元不可见，并抛弃此片元</span><br><span class="line">            discard;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //进行光照计算</span><br><span class="line">            float4 color = Shading(materialInfo, pos, normal, lightDir, viewDir);</span><br><span class="line">            //更新帧缓冲</span><br><span class="line">            writeFrameBuffer(fragment, color);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于每个逐像素光源，我们都需要进行上面一次完整的渲染流程。如果一个物体在多个逐像素光源的影响区域内，那么该物体就需要执行多个Pass，每个Pass计算一个逐像素光源的光照结果，然后在帧缓冲中把这些光照结果混合起来，得到最终的颜色值。</p><p>假设场景中有<strong><em>N</em></strong>个物体，每个物体受<strong><em>M</em></strong>个光源影响，那么渲染整个场景一共需要<strong><em>N·M</em></strong>个Pass。所以，如果有大量的逐像素光照，那么需要执行的Pass数量也会很大。因此，渲染引擎通常会限制每个物体的逐像素光照的数目。</p><h3 id="Unity中的前向渲染"><a href="#Unity中的前向渲染" class="headerlink" title="Unity中的前向渲染"></a>Unity中的前向渲染</h3><p>实际上，一个Pass不仅仅可以用来计算逐像素光照，也可以用来计算逐顶点等其他光照。这取决于光照计算所处流水线阶段，以及计算时使用的数学模型。当我们渲染一个物体时，Unity会计算哪些光源照亮了它，以及这些光源照亮该物体的方式。</p><p>在Unity中，前向渲染有三种处理光照的方式：<strong>逐顶点处理</strong>、<strong>逐像素处理</strong>、<strong>球谐函数（Spherical Harmonics，SH）处理</strong>。而决定一个光源使用哪种处理模式取决于它的类型和渲染模式。光源类型指的是该光源是平行光还是其他类型的光源，而光源的渲染模式指的是该光源是否是<strong>重要的（Important）</strong>。如果我们把一个光照的模式设置为Important，意味着我们要告诉Unity，这个光源很重要，需要把它当成一个逐像素光源来处理。我们可以在光源的Light组件中设置这些属性。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20210725171623.png" alt="img"></p><p>在前向渲染中，当我们渲染一个物体时，Unity会根据场景中各个光源的设置以及这些光源对物体的影响程度（如，距离该物体远近、光源强度等）对这些光源进行一个重要程度的排序。其中，一定数量的光源会按逐像素的方式处理，然后最多有4个光源按逐顶点的方式处理（每个顶点最多计算四次点光源），剩下的光源可以按SH方式处理。Unity使用的判断规则如下：</p><ul><li>场景中最亮的平行光总是按逐像素处理。</li><li>渲染模式被设置为<strong>Not Important</strong>的光源，会按逐顶点或者SH处理。</li><li>渲染模式被设置为<strong>Important</strong>的光源，会按逐像素处理。</li><li>如果根据以上规则得到的逐像素光源少于<strong>Quality Setting</strong>中逐像素光源数量（Pixel Light Count），会有更多的光源以逐像素的方式进行渲染，按照亮度递减的方式。</li></ul><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20210725173351.png" alt="img"></p><p>每个对象的渲染如下：</p><ul><li>Base Pass应用一个逐像素平行光和所有逐顶点/SH光源。</li><li>其他逐像素光源在Additional Pass中渲染，每个光源执行一次Pass。</li></ul><p>光照计算是在Pass中进行。前面提到过，前向渲染有两种Pass：Base Pass和Additional Pass。通常来说，这两种Pass进行的标签和渲染设置以及常规光照计算如图所示。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20210725192818.png" alt=""></p><ul><li>在渲染设置中，我们除了设置了Pass的标签外，还使用了<strong>#pragma multi_compile_fwdbase</strong>这样的编译指令。</li><li>Base Pass旁边的注释给出了Base Pass中支持的一些光照特性。例如在Base Pass中，我们可以访问光照纹理（lightmap）。</li><li>Base Pass中渲染的平行光默认是支持阴影的（如果开启了光源的阴影功能），而Additional Pass中渲染的光源在默认情况下是没有阴影效果的，即便我们在它的Light组件中设置了有阴影的<strong>Shadow Type</strong>。但我们可以在Additional Pass中使用<strong>#pragma multi_compile_fwdadd_fullshadows</strong>替代<strong>#pragma multi_compile_fwdadd</strong>编译指令，为点光源和聚光灯开启阴影效果，但这需要Unity在内部使用更多的Shader变体。</li><li>环境光和自发光也是在Base Pass中计算的。因为对于一个物体来说，环境光和自发光我们只希望计算一次，如果我们在Additional Pass中计算这两种光照，就会造成叠加多次环境光和自发光的情况，这并不是我们想要的。</li><li>在Additional Pass的渲染设置中，我们还开启和设置了混合模式。这是因为，我们希望每个Additional Pass可以与上一次的光照结果在帧缓存中进行叠加，从而得到有多个光照的渲染效果。如果我们没有开启和设置混合模式，那么Additional Pass的渲染结果会覆盖掉之前的渲染结果，看起来就好像物体只受该光源的影响。通常情况下，我们选择的混合模式是Blend One One。</li><li>对于前向渲染来说，一个Unity Shader通常会定义一个Base Pass（Base Pass也可以定义多次，例如需要双面渲染等情况）以及一个Additional Pass。一个Base Pass仅会执行一次（定义了多个Base Pass的情况除外），而一个Additional Pass会根据影响该物体的其他逐像素光源的数目被多次调用，即每个逐像素光源会执行一次Additional Pass。</li></ul><p>上图给出的光照计算是<strong>通常情况</strong>下我们在没种Pass中进行的计算。实际上，渲染路径的设置用于告诉Unity该Pass在前向渲染路径中的位置，然后底层的渲染引擎会进行相关计算并填充一些内置变量（如_LightColor0等），如何使用这些内置变量进行计算完全取决于开发者的选择。例如，我们完全可以利用Unity提供的内置变量在Base Pass中之进行逐顶点光照；同样，我们也完全可以在Additional Pass中按逐顶点的方式进行光照计算，不进行任何逐像素光照计算。</p><div class="table-container"><table><thead><tr><th style="text-align:center">编译指令</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">multi_compile_fwdbase</td><td style="text-align:center">编译PassType.ForwardBase所需的所有变体。这些变体处理不同的光照贴图类型，以及启用或禁用主平行光的阴影</td></tr><tr><td style="text-align:center">multi_compile_fwdadd</td><td style="text-align:center">编译PassType.ForwardAdd的变体。这会编译变体以处理定向光、聚光灯或点光类型及其带有 cookie 纹理的变体</td></tr><tr><td style="text-align:center">multi_compile_fwdadd_fullshadows</td><td style="text-align:center">与multi_compile_fwdadd相同，但还包括灯光具有实时阴影的能力</td></tr><tr><td style="text-align:center">multi_compile_fog</td><td style="text-align:center">扩展为多个变体，以处理不同的雾类型（off/linear/exp/exp2）</td></tr></tbody></table></div><p>大多数内置的编译指令会产生许多Shader变体。如果确定项目不需要它们，可以使用<strong>#pragma skip_variants</strong>跳过编译其中的一些变体。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma multi_compile_fwdadd</span><br><span class="line">#pragma skip_variants POINT POINT_COOKIE</span><br></pre></td></tr></table></figure><p>该指令跳过所有包含<strong>POINT</strong>或<strong>POINT_COOKIE</strong>的变体。</p><h3 id="内置的光照变量和函数"><a href="#内置的光照变量和函数" class="headerlink" title="内置的光照变量和函数"></a>内置的光照变量和函数</h3><p>根据我们使用的渲染路径（即Pass标签中Light Mode的值），Unity会把不同的光照变量传递给Shader。</p><p>对于前向渲染（即Light Mode为ForwardBase或ForwardAdd）来说，下表给出了我们可以在Shader中访问到的光照变量：</p><div class="table-container"><table><thead><tr><th style="text-align:center">变量名</th><th style="text-align:center">类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">_LightColor0（在UnityLightingCommon.cginc中声明）</td><td style="text-align:center">fixed4</td><td style="text-align:center">该Pass处理的逐像素光源的颜色</td></tr><tr><td style="text-align:center">_WorldSpaceLightPos0</td><td style="text-align:center">float4</td><td style="text-align:center">_WorldSpaceLightPos0.xyz是该Pass处理的逐像素光源的位置。如果该光源是平行光，那么_WorldSpaceLightPos0.w是0（因为平行光是向量，不需要矩阵的偏移部分），其他光源类型w值为1</td></tr><tr><td style="text-align:center">unity_WorldToLight（在AutoLight.cginc中声明）</td><td style="text-align:center">float4x4</td><td style="text-align:center">从世界空间到光源空间的变换矩阵。可以用于采样cookie和光强衰减（attenuation）纹理</td></tr><tr><td style="text-align:center">unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0</td><td style="text-align:center">float4</td><td style="text-align:center">仅用于ForwardBase Pass。前4个非重要的点光源在世界空间中的位置</td></tr><tr><td style="text-align:center">unity_4LightAtten0</td><td style="text-align:center">float4</td><td style="text-align:center">仅用于ForwardBase Pass。前四个非重要点光源的衰减因子</td></tr><tr><td style="text-align:center">unity_LightColor</td><td style="text-align:center">half4[4]</td><td style="text-align:center">仅用于ForwardBase Pass。前四个非重要点光源的颜色。</td></tr><tr><td style="text-align:center">unity_WorldToShadow</td><td style="text-align:center">float4x4[4]</td><td style="text-align:center">世界空间到阴影空间（World-to-shadow）的矩阵。一个用于聚光灯的矩阵，最多四个用于平行光级联。</td></tr></tbody></table></div><p>仅可以在前向渲染中使用的内置光照函数：</p><div class="table-container"><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">float3 WorldSpaceLightDir(float4 v)</td><td style="text-align:center">给定模型空间的顶点位置，返回世界空间中从该点到光源的光照方向。未被归一化。</td></tr><tr><td style="text-align:center">float3 ObjSpaceLightDir(float4 v)</td><td style="text-align:center">给定模型空间的顶点位置，返回模型空间中从该点到光源的光照方向。未被归一化。</td></tr><tr><td style="text-align:center">float3 Shade4PointLights(…)</td><td style="text-align:center">计算四个点光源的光照，它的参数是已经打包进矢量的光照数据。通常就是上表中的内置变量，如unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0、unity_LightColor、unity_4LightAtten0等。前向渲染通常会使用此函数来计算逐顶点光照。</td></tr></tbody></table></div><p>参考文献：</p><ul><li>《Unity Shader入门经验》</li><li>Unity官方手册</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Unity里，&lt;strong&gt;渲染路径（Rendering Path）&lt;/strong&gt;决定了光照是如何应用到Unity Shader中的。因此，如果要和光源打交道，我们需要为每个Pass指定它使用的渲染路径，只有这样才能让Unity知道我们想要使用哪种渲染路径，从而把光
      
    
    </summary>
    
    
      <category term="Computer Graphics" scheme="http://blog.jammelee.top/categories/Computer-Graphics/"/>
    
    
      <category term="Unity Shader" scheme="http://blog.jammelee.top/tags/Unity-Shader/"/>
    
  </entry>
  
  <entry>
    <title>Shading</title>
    <link href="http://blog.jammelee.top/2021/05/16/ComputerGraphics/Shading/"/>
    <id>http://blog.jammelee.top/2021/05/16/ComputerGraphics/Shading/</id>
    <published>2021-05-16T15:58:25.000Z</published>
    <updated>2021-07-27T16:23:02.044Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Illumination-amp-Shading"><a href="#Illumination-amp-Shading" class="headerlink" title="Illumination &amp; Shading"></a>Illumination &amp; Shading</h3><h4 id="Shading-Definition"><a href="#Shading-Definition" class="headerlink" title="Shading: Definition"></a>Shading: Definition</h4><ul><li><p>In Merriam-Webster Dictionary</p><p>​    shad·ing, [ˈʃeɪdɪŋ], noun </p><p>​    The darkening or coloring of an illustration or diagram with parallel lines or a block of color.</p></li><li><p>In this course</p><p>​    The process of applying a material to an object.</p></li></ul><h4 id="A-Simple-Shading-Model-Blinn-Phong-Reflectance-Model"><a href="#A-Simple-Shading-Model-Blinn-Phong-Reflectance-Model" class="headerlink" title="A Simple Shading Model (Blinn-Phong Reflectance Model)"></a>A Simple Shading Model (Blinn-Phong Reflectance Model)</h4><ul><li>Specular highlights（镜面高光）</li><li>Diffuse reflection（漫反射）</li><li>Ambient lighting（环境光）</li></ul><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200608205432.png" alt="img"></p><!--![img](\Shading Note\20200608205432.png)--><h5 id="Shading-is-Local"><a href="#Shading-is-Local" class="headerlink" title="Shading is Local"></a>Shading is Local</h5><p>Compute light reflected toward camera at a specific shading point.</p><p>Inputs: </p><ul><li>Viewer direction, $ v $</li><li>Surface normal, $ n $</li><li>Light direction, $ l $ (for each of many lights) </li><li>Surface parameters(color, shininess, …)</li></ul><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200608205843.png" alt=""></p><!--![img](Shading Note\20200608205843.png)--><p>No shadows will be generated! (shading ≠ shadow) </p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200608210044.png" alt=""></p><!-- ![img](Shading Note\20200608210044.png) --><h5 id="Diffuse-Reflection"><a href="#Diffuse-Reflection" class="headerlink" title="Diffuse Reflection"></a>Diffuse Reflection</h5><ul><li>But how much light (energy) is received?<ul><li>Lambert’s cosine law</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200608210753.png" alt="img"></p><ol><li>立方体的顶面接收一定量的光</li><li>旋转60度的立方体顶面只截取了一半的光</li><li>通常，每个单位面积的光与<script type="math/tex">\cos(\theta) = l · n</script>成正比</li></ol><h5 id="Light-Falloff"><a href="#Light-Falloff" class="headerlink" title="Light Falloff"></a>Light Falloff</h5><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200608212142.png" alt="img"></p><p>半径为1的球面上，光的强度为I。球的面积公式为<script type="math/tex">4\pi R^{2}</script>， 所以图中最远处的球面上，光强度为<script type="math/tex">I/R^{2}</script>。</p><h5 id="Lambertian-Diffuse-Shading"><a href="#Lambertian-Diffuse-Shading" class="headerlink" title="Lambertian (Diffuse) Shading"></a>Lambertian (Diffuse) Shading</h5><p>Shading independent of view direction</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200608212954.png" alt="img"></p><ul><li>$k_{d}$： 漫反射项的系数 （vector类型，分别代表RGB，0-1）<ul><li>如果等于1，就代表该点完全不吸收能量，进来多少反射多少</li><li>如果等于0，就代表该点吸收了所有能量，没有能量反射出去</li></ul></li><li>$I/r^{2}$：到达shading point的能量</li><li>$max(0, n · l)$：有多少能量会被接收，因为n和l为单位向量，所以余弦值就是两个向量点乘，如果余弦值为负数，则无物理意义。</li></ul><p>漫反射打到一个点上，反射光应该是各个方向均匀分布，所以从哪个角度观察，结果都是一模一样的，所以公式和向量v没有任何关系。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200608225954.png" alt="img"></p><h5 id="Specular-Term-Blinn-Phong"><a href="#Specular-Term-Blinn-Phong" class="headerlink" title="Specular Term (Blinn-Phong)"></a>Specular Term (Blinn-Phong)</h5><p>镜面反射项，Blinn-Phong模型（高光）</p><p>镜面反射强度取决于观察方向</p><ul><li>接近镜面反射方向</li></ul><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200608220955.png" alt="img"></p><p>$v$距离镜面反射方向越近，半程向量越接近法向量</p><ul><li>用单位向量的点积测量接近程度</li></ul><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200608221458.png" alt="img"></p><ul><li>$ k_{s} $：镜面反射系数，通常认为是一个白色</li><li>$(I/r^{2})$：到达shading point的能量</li><li>$max(0, n·h)^{p}$：使用点乘计算半程向量和法向量的夹角余弦值，从而判断两个向量的接近程度<ul><li>n：法向量</li><li>h：半程向量，使用平行四边形法则，向量v加上向量l求出半程向量，除以向量的模得出半程向量的单位向量h</li><li>p：指数，因为余弦值用来判断两个向量的接近程度，容忍度太高，会导致高光面积过大，所以需要加一个指数。正常再Blinn-Phong模型中大概会用到100-200。（如下图)</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200608223149.png" alt="img"></p><p>这里因为Blinn-Phong模型是一个经验模型，所以不考虑shading poing有多少能量被吸收。</p><p>使用镜面反射向量r和观察向量v做点乘也可以判断这两个向量的远近程度，从而判断高光。此模型被称为Phong模型，Blinn-Phong模型是Phong模型的一个改进，因为半程向量的计算量低于反射向量的计算量。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200608223317.png" alt="img"></p><h5 id="Ambient-Term"><a href="#Ambient-Term" class="headerlink" title="Ambient Term"></a>Ambient Term</h5><p>环境光</p><p>做一个大胆的假设，任何一个点接收到来自环境的光永远都是相同的，强度叫做$ I_{a} $。任何点都有自己的一个颜色，$k_{a}$环境光的系数。把$k_{a}$和$I_{a}$结合在一起，我们就可以近似的得出一个环境光。可以保证没有地方是完全黑色的。</p><h5 id="Blinn-Phong-Reflection-Model"><a href="#Blinn-Phong-Reflection-Model" class="headerlink" title="Blinn-Phong Reflection Model"></a>Blinn-Phong Reflection Model</h5><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200608225152.png" alt="img"></p><script type="math/tex; mode=display">\begin{equation}\begin{split}L &= L_{a} + L_{d} + L_{s} \\&= k_{a}I_{a} + k_{d}(I/r^{2})max(0, n·l) + k_{s}(I/r^{2})max(0, n·h)^{p}\\\end{split}\end{equation}</script><h4 id="Shading-Frequencies"><a href="#Shading-Frequencies" class="headerlink" title="Shading Frequencies"></a>Shading Frequencies</h4><h5 id="Shading-Frequency-Face-Vertex-or-Pixel"><a href="#Shading-Frequency-Face-Vertex-or-Pixel" class="headerlink" title="Shading Frequency: Face, Vertex or Pixel"></a>Shading Frequency: Face, Vertex or Pixel</h5><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609111554.png" alt="img"></p><p>着色频率取决于几何面或者顶点出现的频率，当面出现的频率已经很高的情况下，就不需要使用复杂的逐像素着色。</p><h5 id="Defining-Per-Vertex-Normal-Vectors"><a href="#Defining-Per-Vertex-Normal-Vectors" class="headerlink" title="Defining Per-Vertex Normal Vectors"></a>Defining Per-Vertex Normal Vectors</h5><p>最好的方法是从基础的集合获取顶点的法线。例如下图（上），当我们知道我们所要渲染的几何是个球体，那么顶点表示的就是球面上的点，可以通过求该顶点所在球面的法线来获取顶点法线。但是现实情况中，并不能够总是渲染一个已知的规则几何。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609112815.png" alt="img"></p><p>所以我们需要通过三角面的法线来推断顶点法线，其中最简单的方案就是，求顶点所关联的所有面法线之和的平均，然后再做归一化操作，得出该顶点的法线。</p><script type="math/tex; mode=display">N_{v} = \frac{\sum_i N_{i}}{||\sum_i N_{i}||}</script><h5 id="Defining-Per-Pixel-Normal-Vectors"><a href="#Defining-Per-Pixel-Normal-Vectors" class="headerlink" title="Defining Per-Pixel Normal Vectors"></a>Defining Per-Pixel Normal Vectors</h5><p>Barycentric interpolation (introducing soon) of vertex normals</p><p>顶点法线的重心插值</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609114951.png" alt="img"></p><h4 id="Graphics-Real-time-Rendering-Pipeline"><a href="#Graphics-Real-time-Rendering-Pipeline" class="headerlink" title="Graphics (Real-time Rendering) Pipeline"></a>Graphics (Real-time Rendering) Pipeline</h4><p>图形管线（实时渲染管线）流程</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609184456.png" alt="img"></p><p>顶点处理，做一些顶点变换</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609184555.png" alt="img"></p><p>顶点处理和三角形处理后，进行光栅化三角形</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609184952.png" alt="img"></p><p>片段（像素）处理，深度测试（有些教材把深度测试归为光栅化阶段）</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609185037.png" alt="img"></p><p>着色阶段有两个</p><ul><li>顶点着色，高洛德着色（Gouraud Shading）</li><li>片段着色，Phong着色（Phong Shading）。</li></ul><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609185228.png" alt="img"></p><p>纹理映射</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609185602.png" alt="img"></p><h5 id="Shader-Programs"><a href="#Shader-Programs" class="headerlink" title="Shader Programs"></a>Shader Programs</h5><ul><li>Vertex shader</li><li>Fragment shader</li></ul><p>这里拿一个GLSL的片段着色程序来做实例：</p><ul><li>着色方法在每个片段上执行一次</li><li>在当前片段的屏幕采样点输出表面颜色</li><li>该着色器执行纹理查找以获取表面的材质颜色，然后执行漫射照明计算</li></ul><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">sampler2D</span> myTexture; <span class="comment">// program parameter</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec3</span> lightDir; <span class="comment">// program parameter</span></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec2</span> uv; <span class="comment">// per fragment value (interp. by rasterizer)</span></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec3</span> norm; <span class="comment">// per fragment value (interp. by rasterizer)</span></span><br><span class="line"><span class="type">void</span> diffuseShader()</span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">vec3</span> kd;</span><br><span class="line"> kd = texture2d(myTexture, uv); <span class="comment">// material color from texture</span></span><br><span class="line"> kd *= <span class="built_in">clamp</span>(<span class="built_in">dot</span>(–lightDir, norm), <span class="number">0.0</span>, <span class="number">1.0</span>); <span class="comment">// Lambertian shading model</span></span><br><span class="line"> <span class="built_in">gl_FragColor</span> = <span class="type">vec4</span>(kd, <span class="number">1.0</span>); <span class="comment">// output fragment color</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Goal-Highly-Complex-3D-Scenes-in-Realtime"><a href="#Goal-Highly-Complex-3D-Scenes-in-Realtime" class="headerlink" title="Goal: Highly Complex 3D Scenes in Realtime"></a>Goal: Highly Complex 3D Scenes in Realtime</h5><ul><li>100’s of thousands to millions of triangles in a scene </li><li>Complex vertex and fragment shader computations</li><li>High resolution (2-4 megapixel + supersampling) </li><li>30-60 frames per second (even higher for VR)</li></ul><h4 id="Texture-Mapping"><a href="#Texture-Mapping" class="headerlink" title="Texture Mapping"></a>Texture Mapping</h4><h5 id="Surfaces-are-2D"><a href="#Surfaces-are-2D" class="headerlink" title="Surfaces are 2D"></a>Surfaces are 2D</h5><p>任何一个三维物体它的表面都是二维的。</p><p>任意3D表面上的点都对应2D图片上的一个位置，这个2D图片就称为纹理（Texture）。把这个图片通过拉伸、压缩等方式蒙在3D物体的表面，这个过程就叫做纹理映射（Texture Mapping）。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609193337.png" alt="img"></p><p>每个三角形将一块纹理图片“拷贝”到表面。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609194915.png" alt="img"></p><p>每一个三角形的顶点上都分配有一个纹理坐标（Texture Coordinate，（u,v））</p><ul><li>$ u $：代表横向坐标，越红代表值越大</li><li>$ v $：代表纵向坐标，越绿代表值越大</li><li>坐标值在区间$ [0,1] $上，方便计算任何分辨率大小的纹理的坐标</li></ul><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609195433.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609195505.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609195633.png" alt="img"></p><p>可视化的纹理坐标</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609195729.png" alt="img"></p><p>纹理是可以复用的，即同一个纹理可以被多次使用。这种纹理在图形学中被统称为无缝纹理贴图（Tileable Texture）。这种纹理的设计需要各种各样的算法，其中一种算法叫做Wang  Tiled。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200609195905.png" alt="img"></p><h5 id="Interpolation-Across-Triangles-Barycentric-Coordinates"><a href="#Interpolation-Across-Triangles-Barycentric-Coordinates" class="headerlink" title="Interpolation Across Triangles:Barycentric Coordinates"></a>Interpolation Across Triangles:Barycentric Coordinates</h5><p>三角形的插值：重心坐标</p><p>我们为什么要引入插值？</p><ul><li>三角形顶点的值都是额定的</li><li>平滑过渡</li></ul><p>我们使用插值都做了些什么？</p><ul><li>纹理坐标插值</li><li>颜色插值</li><li>法线插值</li></ul><p>重心坐标是定义在三角形上的，在三角形ABC构成的平面内，任何一点(x, y)都可以表示成A、B、C这三个顶点坐标的线性组合。</p><script type="math/tex; mode=display">(x,y)=\alpha A+\beta B+\gamma C \\\alpha+\beta+\gamma=1</script><p>当系数$\alpha$、$\beta$、$\gamma$都非负时，该点在三角形内；否则在三角形外。如果三个系数之和不为1，那么该点不在三角形构成的平面内。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200611194235.png" alt="img"></p><p>那么三角形A点的重心坐标是多少呢，显而易见：</p><script type="math/tex; mode=display">\begin{equation}\begin{split}(\alpha, \beta, \gamma) &= (1, 0, 0) \\(x, y) &= \alpha A+\beta B+\gamma C \\&= A\end{split}\end{equation}</script><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200611194644.png" alt="img"></p><p>在几何定义下，我们可以通过面积之比来计算三个系数$ \alpha $、$ \beta $、$ \gamma $。</p><script type="math/tex; mode=display">\begin{equation}\begin{split}\alpha &= \frac{A_{A}}{A_{A}+A_{B}+A_{C}} \\\beta &= \frac{A_{B}}{A_{A}+A_{B}+A_{C}} \\\gamma &= \frac{A_{C}}{A_{A}+A_{B}+A_{C}} \\\end{split}\end{equation}</script><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200611195210.png" alt="img"></p><p>在重心坐标系下，三角形的重心是多少呢？</p><p>根据重心的性质，重心和三角形的三个顶点连接起来，会将三角形等分为三份，即三个等面积的三角形。那么根据上边的公式可以得出：</p><script type="math/tex; mode=display">\begin{equation}\begin{split}(\alpha, \beta, \gamma) &= (\frac{1}{3}, \frac{1}{3}, \frac{1}{3}) \\(x, y) &= \frac{1}{3} A+\frac{1}{3} B+\frac{1}{3} C \\\end{split}\end{equation}</script><p>同时，三角形的面积可以通过向量的叉乘计算：</p><script type="math/tex; mode=display">\begin{equation}\begin{split}\alpha &= \frac{-(x-x_{B})(y_{C}-y_{B})+(y-y_{B})(x_{C}-x_{B})}{-(x_{A}-x_{B})(y_{C}-y_{B})+(y_{A}-y_{B})(x_{C}-x_{B})} \\\beta &= \frac{-(x-x_{C})(y_{A}-y_{C})+(y-y_{C})(x_{A}-x_{C})}{-(x_{B}-x_{C})(y_{A}-y_{C})+(y_{B}-y_{C})(x_{A}-x_{C})} \\\gamma &= 1-\alpha-\beta \\\end{split}\end{equation}</script><p>我们需要插值的属性，也同样可以通过重心坐标线性的组合出来。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200611201227.png" alt="img"></p><p>但是，重心坐标在投影变化下，并不是不变的。所以光栅化中的深度测试，需要先做逆变换，然后对三维空间中的坐标做插值。</p><h5 id="Applying-Textures"><a href="#Applying-Textures" class="headerlink" title="Applying Textures"></a>Applying Textures</h5><p>如何进行纹理映射？</p><p>先对三角形中的采样点进行纹理坐标插值，得到$(u,v)$坐标，然后在纹理上查询$(u,v)$值，得出这个点上的颜色。我们可以认为这个颜色就是漫反射系数$k_{d}$，然后经过Phong Shading的计算，将这个颜色值设置到物体上，即相当于将图贴到了物体上，且带有漫反射、高光、环境光等效果。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200611203539.png" alt="img"></p><h5 id="Texture-Magnification"><a href="#Texture-Magnification" class="headerlink" title="Texture Magnification"></a>Texture Magnification</h5><h6 id="纹理的放大，即纹理的分辨率不足"><a href="#纹理的放大，即纹理的分辨率不足" class="headerlink" title="纹理的放大，即纹理的分辨率不足"></a>纹理的放大，即纹理的分辨率不足</h6><p>A pixel on a texture — a texel (纹理元素、纹素)</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200611205422.png" alt="img"></p><ul><li>Bilinear Interpolation（双线性插值）</li></ul><p>如下图，我们想要在红点处采样纹理值，其中黑点代表纹理采样点。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200611205548.png" alt="img"></p><p>取四个临近的采样点</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200611210145.png" alt="img"></p><p>令两个采样点之间的距离为1，以四个点的左下角为0点，然后可以通过水平距离$s$和垂直距离$t$，找到红点的位置。</p><p>通过线性插值（Linear interpolation (1D)）操作，即</p><script type="math/tex; mode=display">lerp(x,v_{0},v_{1})=v_{0}+x(v_{1}-v_{0})</script><p>当x=0时，插值等于$v_{0}$；当x=1时，插值等于$v_{1}$。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200611210957.png" alt="img"></p><p>那么，我们对下边这条边，即左下角和右下角这两个点，使用$s$做插值；同理，上边这条边，我们也可以使用$s$对左上角和右上角两点进行插值。即，</p><script type="math/tex; mode=display">u_{0}=lerp(s,u_{00},y_{10}) \\u_{1}=lerp(s,u_{01},y_{11})</script><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200611211030.png" alt="img"></p><p>最后，我们再使用$t$做一次竖直方向上的插值。即，</p><script type="math/tex; mode=display">f(x,y)=lerp(t,u_{0},u_{1})</script><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200611211743.png" alt="img"></p><p>双线性插值通常以合理的成本给出相当不错的结果。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200611211859.png" alt="img"></p><p>但是，双线性插值（Bilinear Interpolation）也存在一些问题，对于一些更高级的方法，双线性插值的质量还是差一些。</p><h6 id="纹理过大，也就是纹理的分辨率过于大"><a href="#纹理过大，也就是纹理的分辨率过于大" class="headerlink" title="纹理过大，也就是纹理的分辨率过于大"></a>纹理过大，也就是纹理的分辨率过于大</h6><p>纹理过大，采样后会出现什么问题呢？</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200612212033.png" alt="img"></p><p>没错，近处会出现锯齿，远处会出现摩尔纹。</p><p>为什么会出现这种走样的情况？</p><p>因为近处一个像素所覆盖的纹理上的区域相对较小，但是在远处一个像素就覆盖了一片纹理区域。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200612213031.png" alt="img"></p><p>那么我们依旧可以采用超采样的方法，得出一个不错的结果，但是使用超采样会有一个问题，那就是开销问题。增加采样点，必然会使整个算法变得特别慢。当然，我们也不希望一个算法会变得超级慢。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200612213558.png" alt="img"></p><p>如果不使用超采样方法的话，我们仅需要得到该像素所对应的范围内的平均值即可。范围查询不只是我们用的这一种应用——平均查询，还有很多类型的范围查询，比如说查询范围内的最大值、最小值等。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200612221107.png" alt="img"></p><p>不同像素在纹理上的覆盖对应不同大小。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200612221257.png" alt="img"></p><h5 id="Mipmap"><a href="#Mipmap" class="headerlink" title="Mipmap"></a>Mipmap</h5><p>允许（快速，近似，正方形）范围查询</p><p>“ Mip”来自拉丁语“multum in parvo”，意思是有很多不同的小的东西。</p><p>其实Mipmap就是从一张图生成一系列图，假如说第一张图叫做Level 0，那么我们可以生成更多更高层的纹理，使得每一层$i$，都是第$i-1$层的长和宽缩小一半，直到最后剩下一个点。一共$log_{2}n$层，$n$为分辨率。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200613161356.png" alt="img"></p><p>对应到Mipmap中，我们生成的是如下图这样的东西，第0层为原始的图像，上边总比下边小一半。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200613161446.png" alt="img"></p><p>所以在计算机视觉界，大家不把它称作Mipmap，而是称作Image pyramid（图像金字塔）。</p><p>Mipmap所造成的额外存储仅是原来的$\frac{1}{3}$，使用级数求和可以计算得出。</p><script type="math/tex; mode=display">\sum_{n=1}^{\infty}{1+\frac{1}{4^n}}</script><p>还有一种理解方式，可以把每一层的存储都乘以3（不影响最终结果），并把第0层的三份分别放在左下角、左上角、右上角，然后把第一层的三份分别放在空置的右下角方块中，并且依旧按照左下角、左上角、右上角，那么右下角再次空出，以此类推把剩余层填入剩余的空间。则会发现，最外层除了三份0层，剩下的层都放在了右下角，所以得出$\frac{1}{3}$。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200613165212.png" alt="img"></p><h6 id="计算Mipmap层"><a href="#计算Mipmap层" class="headerlink" title="计算Mipmap层"></a>计算Mipmap层</h6><p>任何像素都会有一个对应的映射在纹理上的区域</p><p>如下图，要计算左下方的红点所占据的像素的覆盖面积，我们可以取这个像素的中心点和它相邻像素的中心点，分别投影到纹理上去。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200613165710.png" alt="img"></p><p>求出纹理上，该点相对于上方相邻点和右方相邻点的长度，就可以近似计算出这个像素在纹理上所占区域的边长。这个边长就作为以该像素中心点为重心，所占正方形区域的边长。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200613170321.png" alt="img"></p><p>接下来，我们应该如何根据预计算好的Mipmap，去查询这个边长为$L$的正方形区域内的平均值？</p><p>我们可以假设，如果这个正方形的区域大小是1x1，就是一个像素，那我们可以在没有做过Mipmap的最原始的纹理上找对应的像素。</p><p>如果这个正方形的大小是4x4，那我们可以得出这个区域一定会在第2层上变成1个像素。为什么呢？我们可以思考一下，这个区域的大小是4x4，是指在最原始的图片上的大小是4x4。那么经过第一层Mipmap后，这个区域会变成2x2，然后经过第二层Mipmap之后，这个区域会变成1x1。</p><p>这个$L*L$大小的区域，一定会在$log_{2}L$层上对应到1个像素。也就是说我们只要计算出这个区域在第几层变成了一个像素，那么我们就可以去查找那个像素，即立刻得出这个区域的平均值是多少。</p><p>如果说对于每个像素，我们都计算它投影到纹理上对应的区域，然后根据这个区域的大小，计算出应该在第几层Mipmap上去找这个像素的平均值，那我们就可以做一个可视化。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200613172503.png" alt="img"></p><p>虽然在上图中，我们发现这些颜色有些渐变，但是会发现一个问题，那就是这些颜色的变化并不连续。因为我们只查询了第0层、第1层、第2层等等的整数层，如果我们想要查询第1.5层、第1.8层，应该怎么办呢？</p><p>那当然是使用插值</p><p>假设我们想查询第1.8层，那么应该先查询第一层，再查询第二层。在这两层内部，分别使用双线性插值，把所在的这两层上的查询先做出来；然后把这两层插值得出的值，再做一次插值，即相当于在层与层之间做了一次插值。一共做了三次插值，我们把它称作<strong>三线性插值（Trilinear Interpolation）</strong>。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200613174601.png" alt="img"></p><p>再来对比一下原图、超采样、Mipmap。</p><p>原图：</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200613174846.png" alt="img"></p><p>使用512x超采样：</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200613174856.png" alt="img"></p><p>Mipmap：</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200613174913.png" alt="img"></p><p>我们会发现Mipmap似乎并不太对，远处全部模糊了起来。</p><p>原因在于，Mipmap只能查询到正方形区域内的插值。我们可以使用<strong>各向异性过滤（Anisotropic Filtering ）</strong>。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200613180516.png" alt="img"></p><p>Mipmap所做的事情就是在原图上一直把长宽缩小一般，那么对应到下图中其实Mipmap就是做了对角线上的计算。但是有一些图需要作不同长宽比的预计算，这个就是Mipmap中所没有的。</p><p><strong>各向异性过滤</strong></p><p>各向异性是指，在不同的方向上表现各不相同。我们原本认为在正方形的水平和垂直方向上，表现完全相同，就叫做各向同性。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200613180827.png" alt="img"></p><p>我们可以看到上图中，每一行都做了水平方向上的压缩，每一列都是垂直方向上的压缩。它相比于Mipmap多了一些水平方向和垂直方向上不均匀的压缩。</p><p>通过这样的一种方式的预计算，就可以查询到任何一个被压扁了的图的位置，即可以查询原图的一个矩形区域，而不用被限制在一个正方形的区域内。</p><p>因为屏幕上的任何一个像素映射在纹理上，不一定都是一个规律的形状，很可能出现斜着的、极细的形状，如下图。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200613182020.png" alt="img"></p><p>例如上（右）图中，左上方斜长条区域，如果我们把它近似成一个正方形区域，就相当于求了一个更大区域的平均，所以会造成<strong>Overblur（过于模糊）</strong>。</p><p>如果我们引入各向异性过滤，例如上（右）图中，右上方的长条区域就可以得到一个近乎完美的解决，因为各向异性过滤允许我们对这种长条形的区域做一个快速的查询。</p><p>我们可以通过上边带有卫星的那张图片分析出，各向异性过滤所生成的图，总共的开销是原本的3倍（原图占左上角的1/4）。各向异性过滤生成的图有一个名字，叫做<strong>Ripmap</strong>。而Mipmap所需的开销比原本多1/3，这里可以供我们参考一下。</p><p>如果大家经常打游戏的话，会接触到一个各向异性过滤相关的概念，就是多少x，这里的x其实指的就是计算多少层，比如说2x指的就是方向上压缩了一次，就是上边带有卫星的那张图片中的左上角四个卫星的区域，以此类推，4x就是在2x的基础上又压缩了一次，就是上边带有卫星的那张图片中的左上角九个卫星的区域，即左上角$((log_{2}{n})+1)^2$个卫星，n代表nx。</p><p>我们会发现，n的增加，最后的结果会逐渐收敛至原图的三倍，也就是说各向异性过滤的存储量和用户开nx的关系不大。应用各向异性过滤，只要显存足够，其实和计算力基本没有关系，所以在游戏中将各向异性过滤开至最高也几乎不会对游戏有性能的影响。</p><p>但是各向异性过滤仍然不能解决斜着的区域，要解决这个问题，可以使用一些另外的方法，比如EWA filtering。</p><p><strong>EWA filtering</strong></p><ul><li>Use multiple lookups</li><li>Weighted average</li><li>Mipmap hierarchy still helps</li><li>Can handle irregular footprints</li></ul><p>任意一个不规则的形状都可以被拆分成很多圆形，以覆盖这个不规则形状。例如，有一个椭圆形（如下图），可以把它拆分成三个不同的圆形，然后每次去查询一个圆形，然后多次查询，自然就可以去覆盖一个不规则的形状。但是代价就是牺牲时间，因为查询时需要耗时的。</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/BlogPic/20200613183416.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Illumination-amp-Shading&quot;&gt;&lt;a href=&quot;#Illumination-amp-Shading&quot; class=&quot;headerlink&quot; title=&quot;Illumination &amp;amp; Shading&quot;&gt;&lt;/a&gt;Illumination
      
    
    </summary>
    
    
      <category term="Computer Graphics" scheme="http://blog.jammelee.top/categories/Computer-Graphics/"/>
    
    
      <category term="Games101" scheme="http://blog.jammelee.top/tags/Games101/"/>
    
  </entry>
  
  <entry>
    <title>投影变换的推导</title>
    <link href="http://blog.jammelee.top/2020/05/31/ComputerGraphics/%E6%8A%95%E5%BD%B1%E5%8F%98%E6%8D%A2%E7%9A%84%E6%8E%A8%E5%AF%BC/"/>
    <id>http://blog.jammelee.top/2020/05/31/ComputerGraphics/%E6%8A%95%E5%BD%B1%E5%8F%98%E6%8D%A2%E7%9A%84%E6%8E%A8%E5%AF%BC/</id>
    <published>2020-05-31T02:35:25.000Z</published>
    <updated>2021-07-27T16:32:38.899Z</updated>
    
    <content type="html"><![CDATA[<p>这里我们说到的投影分为两种：</p><ul><li>正交投影(Orthographic projection (O))</li><li>透视投影(Perspective projection (P))</li></ul><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/%E7%BB%86%E8%AF%B4%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/20191118233041.png" alt="img"></p><h2 id="正交投影-Orthographic-projecton"><a href="#正交投影-Orthographic-projecton" class="headerlink" title="正交投影(Orthographic projecton)"></a>正交投影(Orthographic projecton)</h2><p>先来说一说最简单的正交投影，我们需要做的是：</p><ul><li>定义一个<script type="math/tex">[l, r] * [b, t] * [f, n]</script>的立方体</li><li>然后将定义的立方体转换成“标准(canonical)”立方体<script type="math/tex">[-1, 1]^{3}</script></li></ul><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/%E7%BB%86%E8%AF%B4%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/20200531015713.png" alt="img"></p><p>如上图，我们想要把最左边的长方体变成最右边的立方体，需要两步：</p><ul><li>平移(Translate)</li><li>缩放(Scale)</li></ul><h3 id="平移-Translate"><a href="#平移-Translate" class="headerlink" title="平移(Translate)"></a>平移(Translate)</h3><p>首先我们要做的操作就是平移，先把长方体的中心点移至原点（origin）。因为我们已经知道l,r,b,t,f,n六个参数，所以我们可以计算出当前长方体的中心点，即：</p><script type="math/tex; mode=display">(x, y, z) = (\frac{(r + l)}{2}, \frac{(t + b)}{2}, \frac{(n + f)}{2})</script><p>那么平移变换矩阵就应该是一个单位矩阵加上平移部分，要想将长方体的中心点移至原点（origin），只需要把所有点都减去长方体的中心点即可。</p><script type="math/tex; mode=display">M_{Translate} = \begin{pmatrix}1 & 0 & 0 & -\frac{(r + l)}{2} \\0 & 1 & 0 & -\frac{(t + b)}{2} \\0 & 0 & 1 & -\frac{(n + f)}{2} \\0 & 0 & 0 & 1 \\\end{pmatrix}</script><h3 id="缩放-Scale"><a href="#缩放-Scale" class="headerlink" title="缩放(Scale)"></a>缩放(Scale)</h3><p>有了平移变换，接下来要做的就是缩放了，将每个点都等比缩放至<script type="math/tex">[-1, 1]^{3}</script>立方体上。那么<script type="math/tex">[l, r]</script>和<script type="math/tex">[-1, 1]</script>的比例为<script type="math/tex">\frac{2}{r - l}</script>，<script type="math/tex">[b, t]</script>和<script type="math/tex">[-1, 1]</script>的比例为<script type="math/tex">\frac{2}{t - b}</script>，<script type="math/tex">[f, n]</script>和<script type="math/tex">[-1, 1]</script>的比例为<script type="math/tex">\frac{2}{n - f}</script>（因为相机照像<script type="math/tex">-z</script>方向，所以<script type="math/tex">n</script>比<script type="math/tex">f</script>大）。</p><script type="math/tex; mode=display">M_{Scale} = \begin{pmatrix}\frac{2}{r - l} & 0 & 0 & 0 \\0 & \frac{2}{t - b} & 0 & 0 \\0 & 0 & \frac{2}{n - f} & 0 \\0 & 0 & 0 & 1 \\\end{pmatrix}</script><h3 id="两种变换相乘"><a href="#两种变换相乘" class="headerlink" title="两种变换相乘"></a>两种变换相乘</h3><p>将平移和缩放融合在一起，即两矩阵相乘：</p><script type="math/tex; mode=display">\begin{equation}\begin{split}M_{Ortho} &= M_{Scale} * M_{Translate} \\&= \begin{pmatrix}\frac{2}{r - l} & 0 & 0 & 0 \\0 & \frac{2}{t - b} & 0 & 0 \\0 & 0 & \frac{2}{n - f} & 0 \\0 & 0 & 0 & 1 \\\end{pmatrix}*\begin{pmatrix}1 & 0 & 0 & -\frac{(r + l)}{2} \\0 & 1 & 0 & -\frac{(t + b)}{2} \\0 & 0 & 1 & -\frac{(n + f)}{2} \\0 & 0 & 0 & 1 \\\end{pmatrix} \\&=\begin{pmatrix}\frac{2}{r - l} & 0 & 0 & -\frac{(r + l)}{r - l} \\0 & \frac{2}{t - b} & 0 & -\frac{(t + b)}{t - b} \\0 & 0 & \frac{2}{n - f} & -\frac{(n + f)}{n - f} \\0 & 0 & 0 & 1 \\\end{pmatrix} \\\end{split}\end{equation}</script><h2 id="透视投影-Perspective-projection"><a href="#透视投影-Perspective-projection" class="headerlink" title="透视投影(Perspective projection)"></a>透视投影(Perspective projection)</h2><p>透视投影相对于正交投影就比较困难了，不过我们可以换一种思路</p><ul><li>首先，把视锥体(view frustum)挤扁成一个立方体(cuboid)(<script type="math/tex">M_{Persp->Ortho}</script>)</li><li>然后，我们通过正交投影，即可把远平面投影至近平面</li></ul><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/%E7%BB%86%E8%AF%B4%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/20200531025421.png" alt="img"></p><h3 id="把视锥体-view-frustum-挤扁成一个立方体-cuboid"><a href="#把视锥体-view-frustum-挤扁成一个立方体-cuboid" class="headerlink" title="把视锥体(view frustum)挤扁成一个立方体(cuboid)"></a>把视锥体(view frustum)挤扁成一个立方体(cuboid)</h3><p>在挤压的过程中，我们需要规定几件事情：</p><ul><li>近平面上的任意点都不会改变</li><li>远平面上的<script type="math/tex">z</script>值不变，永远都是<script type="math/tex">f</script></li><li>远平面上的中心点不变</li></ul><p>下面我们来寻找一下近平面和远平面之间的点的关系，从视锥体的右侧观察，如下图：</p><p><img src="https://raw.githubusercontent.com/JammeLee/MyPicBed/master/%E7%BB%86%E8%AF%B4%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/20200531025750.png" alt="img"></p><p>通过相似三角形的性质，可以得出<script type="math/tex">y^{'} = \frac{n}{z}y</script>，同理，<script type="math/tex">x^{'} = \frac{n}{z}x</script>。</p><p>因为<script type="math/tex">z</script>暂时未知，那么我们可以得出，点<script type="math/tex">\begin{pmatrix} x & y & z & 1\end{pmatrix}^{T}</script>经过变换后，可以得到点<script type="math/tex">\begin{pmatrix} \frac{nx}{z} & \frac{ny}{z} & unknow & 1\end{pmatrix}^{T}</script>。</p><p>通过齐次坐标，我们可以将点<script type="math/tex">\begin{pmatrix} \frac{nx}{z} & \frac{ny}{z} & unknow & 1\end{pmatrix}^{T}</script>转换为点<script type="math/tex">\begin{pmatrix} nx & ny & unknow & z\end{pmatrix}^{T}</script>。</p><p>所以，</p><script type="math/tex; mode=display">M_{Persp->Ortho} · \begin{pmatrix} x \\ y \\ z \\ 1\end{pmatrix} = \begin{pmatrix} nx \\ ny \\ unknow \\ z\end{pmatrix}</script><p>根据上述等式，我们已经可以反推出：</p><script type="math/tex; mode=display">M_{Persp->Ortho} = \begin{pmatrix} n & 0 & 0 & 0\\0 & n & 0 & 0 \\? & ? & ? & ? \\ 0 & 0 & 1 & 0 \\\end{pmatrix}</script><p>那么未知的第三行应该如何推算呢？我们可以思考两个特殊条件：</p><ul><li>近平面上任意点在做变换后，不会改变</li><li>远平面上任意点的z值在做变换后，不会改变</li></ul><h4 id="近平面上任意点变换后不会改变"><a href="#近平面上任意点变换后不会改变" class="headerlink" title="近平面上任意点变换后不会改变"></a>近平面上任意点变换后不会改变</h4><p>取近平面上点<script type="math/tex">(x, y, n, 1)^{T}</script>，通过齐次坐标，可以转换为点<script type="math/tex">(nx, ny, n^{2}, n)^{T}</script>。则：</p><script type="math/tex; mode=display">\begin{equation}\begin{split}M_{Persp->Ortho} · \begin{pmatrix}x \\ y \\ n \\ 1\\ \end{pmatrix} &= \begin{pmatrix}nx \\ ny \\ n^{2} \\ n\\ \end{pmatrix} \\\begin{pmatrix} n & 0 & 0 & 0\\0 & n & 0 & 0 \\? & ? & ? & ? \\ 0 & 0 & 1 & 0 \\\end{pmatrix}·\begin{pmatrix}x \\ y \\ n \\ 1\\ \end{pmatrix} &= \begin{pmatrix}nx \\ ny \\ n^{2} \\ n\\ \end{pmatrix}\\\end{split}\end{equation}</script><p>我们单独解出变换矩阵的第三行，即：</p><script type="math/tex; mode=display">\begin{pmatrix} ? & ? & ? & ? \\ \end{pmatrix}·\begin{pmatrix}x \\ y \\ n \\ 1\\ \end{pmatrix} = n^{2}</script><p>因为等式结果等于<script type="math/tex">n^{2}</script>，与<script type="math/tex">x</script>和<script type="math/tex">y</script>值并没有关系，所以得出：</p><script type="math/tex; mode=display">\begin{pmatrix} 0 & 0 & A & B \\ \end{pmatrix}·\begin{pmatrix}x \\ y \\ n \\ 1\\ \end{pmatrix} = n^{2}</script><p>可得出（1）式，</p><script type="math/tex; mode=display">An + B = n^{2}</script><h4 id="远平面上任意点的z值变换后不会改变"><a href="#远平面上任意点的z值变换后不会改变" class="headerlink" title="远平面上任意点的z值变换后不会改变"></a>远平面上任意点的z值变换后不会改变</h4><p>因为开始时，我们规定远平面中心点在变换后，仍然不改变，所以我们取远平面的中心点<script type="math/tex">(0, 0, f, 1)^{T}</script>，通过齐次坐标，我们可以将点转换为<script type="math/tex">(0, 0, f^{2}, f)^{T}</script>。</p><p>则，</p><script type="math/tex; mode=display">\begin{pmatrix} n & 0 & 0 & 0\\0 & n & 0 & 0 \\0 & 0 & A & B \\ 0 & 0 & 1 & 0 \\\end{pmatrix}·\begin{pmatrix}0 \\ 0 \\ f \\ 1\\ \end{pmatrix} = \begin{pmatrix}0 \\ 0 \\ f^{2} \\ f\\ \end{pmatrix}\\</script><p>因为等式结果等于<script type="math/tex">f^{2}</script>，与<script type="math/tex">x</script>和<script type="math/tex">y</script>值并没有关系，所以得出：</p><script type="math/tex; mode=display">\begin{pmatrix} 0 & 0 & A & B \\ \end{pmatrix}·\begin{pmatrix}0 \\ 0 \\ f \\ 1\\ \end{pmatrix} = f^{2}</script><p>可得出（2）式，</p><script type="math/tex; mode=display">Af + B = f^{2}</script><p>由（1）式和（2）式解得：</p><script type="math/tex; mode=display">A = n + f \\B = -nf</script><p>所以，得出：</p><script type="math/tex; mode=display">M_{Persp->Ortho} = \begin{pmatrix} n & 0 & 0 & 0\\0 & n & 0 & 0 \\0 & 0 & n + f & -nf \\ 0 & 0 & 1 & 0 \\\end{pmatrix}</script><h3 id="通过正交投影把远平面投影至近平面"><a href="#通过正交投影把远平面投影至近平面" class="headerlink" title="通过正交投影把远平面投影至近平面"></a>通过正交投影把远平面投影至近平面</h3><p>正交投影的变换矩阵在上边我们已经求出，且<script type="math/tex">M_{Persp->Ortho}</script>也已求出，所以我们可以通过矩阵乘法求得<script type="math/tex">M_{Persp}</script>。</p><p>即，</p><script type="math/tex; mode=display">\begin{equation}\begin{split}M_{Persp} &= M_{Ortho} · M_{Persp->Ortho} \\&= \begin{pmatrix}\frac{2}{r - l} & 0 & 0 & -\frac{(r + l)}{r - l} \\0 & \frac{2}{t - b} & 0 & -\frac{(t + b)}{t - b} \\0 & 0 & \frac{2}{n - f} & -\frac{(n + f)}{n - f} \\0 & 0 & 0 & 1 \\\end{pmatrix}·\begin{pmatrix} n & 0 & 0 & 0\\0 & n & 0 & 0 \\0 & 0 & n + f & -nf \\ 0 & 0 & 1 & 0 \\\end{pmatrix} \\&=\begin{pmatrix}\frac{2n}{r - l} & 0 & -\frac{r + l}{r - l} & 0 \\0 & \frac{2}{t - b} & -\frac{(t + b)}{t - b} & 0 \\0 & 0 & \frac{n + f}{n - f} & -\frac{2nf}{n - f} \\0 & 0 & 1 & 0 \\\end{pmatrix} \\\end{split}\end{equation}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里我们说到的投影分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正交投影(Orthographic projection (O))&lt;/li&gt;
&lt;li&gt;透视投影(Perspective projection (P))&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://r
      
    
    </summary>
    
    
      <category term="Computer Graphics" scheme="http://blog.jammelee.top/categories/Computer-Graphics/"/>
    
    
      <category term="Games101" scheme="http://blog.jammelee.top/tags/Games101/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用命令生成文章</title>
    <link href="http://blog.jammelee.top/2020/05/20/Other/Hexo%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E7%94%9F%E6%88%90%E6%96%87%E7%AB%A0/"/>
    <id>http://blog.jammelee.top/2020/05/20/Other/Hexo%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E7%94%9F%E6%88%90%E6%96%87%E7%AB%A0/</id>
    <published>2020-05-19T18:01:12.000Z</published>
    <updated>2021-05-16T14:00:29.798Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo使用命令生成文章"><a href="#Hexo使用命令生成文章" class="headerlink" title="Hexo使用命令生成文章"></a>Hexo使用命令生成文章</h3><ul><li>hexo new &lt;文章类型&gt;  [文章名称]</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new post post1 <span class="comment">#在source/_posts/路径下生成post1.md和post1/</span></span><br><span class="line">$ hexo new post -p Path/post2 <span class="comment">#在source/_post/Path/路径下生成post2.md和post2/</span></span><br><span class="line">$ hexo new page page1 <span class="comment">#在source路径下生成page1/index/和page1/index.md</span></span><br><span class="line">$ hexo new draft draft1 <span class="comment">#在source/_draft下生成test/和test.md</span></span><br></pre></td></tr></table></figure><p>即，<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: hexo new [layout] &lt;title&gt;</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">Create a new post.</span><br><span class="line"></span><br><span class="line">Arguments:</span><br><span class="line"> layout Post layout. Use post, page, draft or whatever you want.</span><br><span class="line"> title Post title. Wrap it with quotations to escape.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -p, --path Post path. Customize the path of the post.</span><br><span class="line"> -r, --replace Replace the current post <span class="keyword">if</span> existed.</span><br><span class="line"> -s, --slug Post slug. Customize the URL of the post.</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hexo使用命令生成文章&quot;&gt;&lt;a href=&quot;#Hexo使用命令生成文章&quot; class=&quot;headerlink&quot; title=&quot;Hexo使用命令生成文章&quot;&gt;&lt;/a&gt;Hexo使用命令生成文章&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;hexo new &amp;lt;文章类型&amp;gt;  [
      
    
    </summary>
    
    
      <category term="Other" scheme="http://blog.jammelee.top/categories/Other/"/>
    
    
      <category term="Hexo" scheme="http://blog.jammelee.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo文件夹名称大小写问题</title>
    <link href="http://blog.jammelee.top/2020/05/20/Other/Hexo%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D%E7%A7%B0%E5%A4%A7%E5%B0%8F%E5%86%99%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.jammelee.top/2020/05/20/Other/Hexo%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D%E7%A7%B0%E5%A4%A7%E5%B0%8F%E5%86%99%E9%97%AE%E9%A2%98/</id>
    <published>2020-05-19T17:43:49.000Z</published>
    <updated>2021-05-16T14:00:29.798Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo文件夹名称大小写问题"><a href="#Hexo文件夹名称大小写问题" class="headerlink" title="Hexo文件夹名称大小写问题"></a>Hexo文件夹名称大小写问题</h3><p>因为更换了主题，所以修改了About和Tags文件夹的名称，把首写字母改成了小写，但是因为Git不区分大小写，所以导致修改后，执行如下命令时报错。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend <span class="built_in">dirs</span>...</span><br><span class="line">fatal: will not add file <span class="built_in">alias</span> <span class="string">&#x27;About/index.html&#x27;</span> (<span class="string">&#x27;about/index.html&#x27;</span> already exists <span class="keyword">in</span> index)</span><br><span class="line">FATAL Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">Error: Spawn failed</span></span><br><span class="line"><span class="string">    at ChildProcess.task.on.code (/Users/jamme/Documents/WorkSpace/GitHub/MyBlog/JammeLee.github.blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)</span></span><br><span class="line"><span class="string">    at ChildProcess.emit (events.js:182:13)</span></span><br><span class="line"><span class="string">    at Process.ChildProcess._handle.onexit (internal/child_process.js:240:12)</span></span><br></pre></td></tr></table></figure></p><p>随后，做出了如下尝试，虽然不报错了，但是GitHub pages仓库里出现了两个首写字母分别为大写和小写的文件夹：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .deploy_git/ <span class="comment">#从blog的工作路径下切入</span></span><br><span class="line">$ git config --<span class="built_in">local</span> core.ignorecase <span class="literal">false</span> <span class="comment">#取消忽略大小写</span></span><br></pre></td></tr></table></figure><p>这种情况下可以做如下修改：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm -rf about/</span><br><span class="line">$ rm -rf tags/</span><br><span class="line">$ git add -u</span><br><span class="line">$ git commit -m<span class="string">&#x27;Remove&#x27;</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><p>然后重新切回blog工作路径，执行<code>hexo clean</code>和<code>hexo g</code>，这个时候再次执行<code>hexo d</code>时，就OK了。<br>注：也可从Finder中直接找到<code>.deploy_git/.git</code>文件夹，然后修改其中的<code>config</code>文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hexo文件夹名称大小写问题&quot;&gt;&lt;a href=&quot;#Hexo文件夹名称大小写问题&quot; class=&quot;headerlink&quot; title=&quot;Hexo文件夹名称大小写问题&quot;&gt;&lt;/a&gt;Hexo文件夹名称大小写问题&lt;/h3&gt;&lt;p&gt;因为更换了主题，所以修改了About和Tag
      
    
    </summary>
    
    
      <category term="Other" scheme="http://blog.jammelee.top/categories/Other/"/>
    
    
      <category term="Hexo" scheme="http://blog.jammelee.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>V2ray+ws+tls</title>
    <link href="http://blog.jammelee.top/2020/03/20/Other/v2ray/"/>
    <id>http://blog.jammelee.top/2020/03/20/Other/v2ray/</id>
    <published>2020-03-20T15:04:06.000Z</published>
    <updated>2021-05-16T14:00:29.799Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装V2Ray"><a href="#安装V2Ray" class="headerlink" title="安装V2Ray"></a>安装V2Ray</h3><p>装机系统版本：CentOs7</p><p>首先，安装V2ray：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure></p><p>然后，设置开机启动：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> v2ray</span><br></pre></td></tr></table></figure></p><h3 id="安装SSL证书"><a href="#安装SSL证书" class="headerlink" title="安装SSL证书"></a>安装SSL证书</h3><p>安装EPEL：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br></pre></td></tr></table></figure></p><p>安装certbot用于签发SSL证书：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install certbot</span><br></pre></td></tr></table></figure><br>我这里在安装certbot时，出现了错误：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: repos-lax.psychz.net</span><br><span class="line"> * elrepo-kernel: repos.lax-noc.com</span><br><span class="line"> * extras: repos-lax.psychz.net</span><br><span class="line"> * updates: repos-lax.psychz.net</span><br><span class="line">No package certbot available.</span><br><span class="line">Error: Nothing to <span class="keyword">do</span></span><br></pre></td></tr></table></figure></p><p>需要执行以下几行命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove epel-release</span><br><span class="line">yum clean all</span><br><span class="line">yum -y install yum-utils</span><br><span class="line">yum -y install epel-release</span><br></pre></td></tr></table></figure></p><p>申请SSL证书：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">certbot certonly --standalone -d example.com</span><br></pre></td></tr></table></figure><br>这里的<em>example.com</em>替换成自己的域名</p><p>如果申请成功，证书和私钥路径如下：</p><blockquote><p>/etc/letsencrypt/live/example.com/fullchain.pem<br>/etc/letsencrypt/live/example.com/privkey.pem</p></blockquote><h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><p>添加一个Nginx安装源：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure></p><p>写入：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/7/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></p><p>写入完成按ESC，然后输入:wq，回车保存并退出</p><p>安装Nginx：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install nginx</span><br></pre></td></tr></table></figure></p><p>设置开机启动：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure></p><p>新建一个Nginx站点配置文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/nginx/conf.d/v2ray.conf</span><br></pre></td></tr></table></figure></p><p>写入如下内容：（注意example.com请更换为自己的域名）<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  example.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate    /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class="line">    ssl_certificate_key    /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    error_page 497  https://$host<span class="variable">$request_uri</span>;</span><br><span class="line"></span><br><span class="line">location /ray &#123;</span><br><span class="line">    proxy_pass       http://127.0.0.1:10000;</span><br><span class="line">    proxy_redirect             off;</span><br><span class="line">    proxy_http_version         1.1;</span><br><span class="line">    proxy_set_header Upgrade   <span class="variable">$http_upgrade</span>;</span><br><span class="line">    proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">    proxy_set_header Host      <span class="variable">$http_host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中443是网站端口同时也是V2Ray传输端口，127.0.0.1:10000其中的10000是监听端口，可以自行更改，然后防火墙放行所需端口，或者直接关闭防火墙</p><h3 id="配置V2Ray服务端"><a href="#配置V2Ray服务端" class="headerlink" title="配置V2Ray服务端"></a>配置V2Ray服务端</h3><p>备份一下v2ray的默认配置文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/v2ray/config.json /etc/v2ray/config.json.bak</span><br></pre></td></tr></table></figure></p><p>清空配置文件的内容：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt; /etc/v2ray/config.json</span><br></pre></td></tr></table></figure></p><p>编辑配置文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/v2ray/config.json</span><br></pre></td></tr></table></figure></p><p>写入如下内容：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;inbounds&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;port&quot;</span>: 10000,</span><br><span class="line">      <span class="string">&quot;listen&quot;</span>:<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">      <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;clients&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;你的UUID&quot;</span>,</span><br><span class="line">            <span class="string">&quot;alterId&quot;</span>: 64</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;streamSettings&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;network&quot;</span>: <span class="string">&quot;ws&quot;</span>,</span><br><span class="line">        <span class="string">&quot;wsSettings&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/ray&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;outbounds&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;freedom&quot;</span>,</span><br><span class="line">      <span class="string">&quot;settings&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注：<code>port</code>字段要用上方nginx配置文件中<code>proxy_pass</code>字段里的端口号，客户端中的端口号要使用nginx中<code>listen</code>字段填写的端口号。<br>UUID可以用这个网站生成：<a href="https://www.uuidgenerator.net">https://www.uuidgenerator.net</a><br>全部完成之后，关闭系统防火墙或者自行更改配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><p>同时把SELinux也关了：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure></p><p>启动v2ray和nginx：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start v2ray</span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure></p><p>检查是否运行正常：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status v2ray</span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure></p><p>两个都显示为绿色的active(running)则说明运行成功<br>到此，服务端的配置完成</p><h3 id="CloudFlare"><a href="#CloudFlare" class="headerlink" title="CloudFlare"></a>CloudFlare</h3><p>HTTP ports supported by Cloudflare:</p><ul><li>80</li><li>8080</li><li>8880</li><li>2052</li><li>2082</li><li>2086</li><li><p>2095<br>HTTPS ports supported by Cloudflare:</p></li><li><p>443</p></li><li>2053</li><li>2083</li><li>2087</li><li>2096</li><li>8443</li></ul><p>参考文章：<br><a href="https://www.ecsoe.com/archives/38.html">https://www.ecsoe.com/archives/38.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装V2Ray&quot;&gt;&lt;a href=&quot;#安装V2Ray&quot; class=&quot;headerlink&quot; title=&quot;安装V2Ray&quot;&gt;&lt;/a&gt;安装V2Ray&lt;/h3&gt;&lt;p&gt;装机系统版本：CentOs7&lt;/p&gt;
&lt;p&gt;首先，安装V2ray：&lt;br&gt;&lt;figure class
      
    
    </summary>
    
    
      <category term="Other" scheme="http://blog.jammelee.top/categories/Other/"/>
    
    
      <category term="V2ray" scheme="http://blog.jammelee.top/tags/V2ray/"/>
    
  </entry>
  
  <entry>
    <title>如何将Git仓库备份到本地</title>
    <link href="http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/12.%E5%A6%82%E4%BD%95%E5%B0%86Git%E4%BB%93%E5%BA%93%E5%A4%87%E4%BB%BD%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
    <id>http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/12.%E5%A6%82%E4%BD%95%E5%B0%86Git%E4%BB%93%E5%BA%93%E5%A4%87%E4%BB%BD%E5%88%B0%E6%9C%AC%E5%9C%B0/</id>
    <published>2019-10-21T15:19:10.000Z</published>
    <updated>2021-05-16T13:59:42.849Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="如何将Git仓库备份到本地"><a href="#如何将Git仓库备份到本地" class="headerlink" title="如何将Git仓库备份到本地"></a>如何将Git仓库备份到本地</h3><h4 id="常用的传输协议"><a href="#常用的传输协议" class="headerlink" title="常用的传输协议"></a>常用的传输协议</h4><div class="table-container"><table><thead><tr><th style="text-align:center">常用协议</th><th style="text-align:center">语法格式</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">本地协议（1）</td><td style="text-align:center">/path/to/repo.git</td><td style="text-align:center">哑协议</td></tr><tr><td style="text-align:center">本地协议（2）</td><td style="text-align:center">file:///path/to/repo.git</td><td style="text-align:center">智能协议</td></tr><tr><td style="text-align:center">http/https协议</td><td style="text-align:center"><a href="http://git-server.com:port/path/to/repo.git">http://git-server.com:port/path/to/repo.git</a><br><a href="https://git-server.com:port/path/to/repo.git">https://git-server.com:port/path/to/repo.git</a></td><td style="text-align:center">平时接触到的都是智能协议</td></tr><tr><td style="text-align:center">ssh协议</td><td style="text-align:center">user@git-server.com:path/to/repo.git</td><td style="text-align:center">工作中最常用的智能协议</td></tr></tbody></table></div><h4 id="哑协议与智能协议"><a href="#哑协议与智能协议" class="headerlink" title="哑协议与智能协议"></a>哑协议与智能协议</h4><ul><li>直观区别： 哑协议传输进度不可见；智能协议传输可见。</li><li>传输速度： 智能协议比哑协议传输速度快。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir git-backup <span class="comment">#创建一个备份文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> git-backup <span class="comment">#切换到文件夹下</span></span><br><span class="line">$ git <span class="built_in">clone</span> --bare /Users/xxx/Documents/WorkSpace/GitTest/LocalTest/.git ya.git <span class="comment">#使用哑协议 克隆一个不带工作区的仓库</span></span><br><span class="line">Cloning into bare repository <span class="string">&#x27;ya.git&#x27;</span>...</span><br><span class="line"><span class="keyword">done</span>.</span><br><span class="line">$ ls</span><br><span class="line">ya.git</span><br><span class="line">$ git <span class="built_in">clone</span> --bare file:///Users/xxx/Documents/WorkSpace/GitTest/LocalTest/.git zhineng.git <span class="comment">#使用智能协议 克隆一个不带工作区的仓库（智能协议传输不仅有打包，还有压缩，所以传输速度快）</span></span><br><span class="line">Cloning into bare repository <span class="string">&#x27;zhineng.git&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 47, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (47/47), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (34/34), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 47 (delta 11), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (47/47), 4.06 KiB | 4.06 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (11/11), <span class="keyword">done</span>.</span><br><span class="line">$ ls</span><br><span class="line">ya.git      zhineng.git</span><br></pre></td></tr></table></figure><h4 id="在工作环境中，如何把变更快速的同步到其他地方"><a href="#在工作环境中，如何把变更快速的同步到其他地方" class="headerlink" title="在工作环境中，如何把变更快速的同步到其他地方"></a>在工作环境中，如何把变更快速的同步到其他地方</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/Users/xxx/Documents/WorkSpace/GitTest/LocalTest</span><br><span class="line">$ git remote -v <span class="comment">#查看发现还没有远端仓库</span></span><br><span class="line">$ git remote add zhineng file:///Users/jamme/Documents/WorkSpace/GitTest/git-backup/zhineng.git <span class="comment">#使用智能协议创建远端仓库 仓库名zhineng</span></span><br><span class="line">$ git branch -av <span class="comment">#查看分支 此时查看上边创建远端分支(zhineng.git) 也只有master和temp分支</span></span><br><span class="line">  master 9522b28 modify content</span><br><span class="line">* temp   a82282c Modified readme.md</span><br><span class="line">$ git checkout remote_test <span class="comment">#创建新分支</span></span><br><span class="line">Switched to branch <span class="string">&#x27;remote_test&#x27;</span></span><br><span class="line">$ git branch -av</span><br><span class="line">  master      9522b28 modify content</span><br><span class="line">* remote_test a82282c Modified readme.md</span><br><span class="line">  temp        a82282c Modified readme.md</span><br><span class="line">$ git push zhineng <span class="comment">#推送到远端zhineng分支 这里需要设置upstream</span></span><br><span class="line">fatal: The current branch remote_test has no upstream branch.</span><br><span class="line">To push the current branch and <span class="built_in">set</span> the remote as upstream, use</span><br><span class="line"></span><br><span class="line">    git push --set-upstream zhineng remote_test</span><br><span class="line">$ git push --set-upstream zhineng remote_test <span class="comment">#意味着下次push’remote_test‘分支到’zhineng‘分支就不用再设置</span></span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To file:///Users/jamme/Documents/WorkSpace/GitTest/git-backup/zhineng.git</span><br><span class="line"> * [new branch]      remote_test -&gt; remote_test</span><br><span class="line">Branch <span class="string">&#x27;remote_test&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;remote_test&#x27;</span> from <span class="string">&#x27;zhineng&#x27;</span>.</span><br></pre></td></tr></table></figure><ul><li>切换至远端</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/Users/xxx/Documents/WorkSpace/GitTest/git-backup/zhineng.git</span><br><span class="line">$ git branch -av</span><br><span class="line">  master      9522b28 modify content</span><br><span class="line">  remote_test a82282c Modified readme.md</span><br><span class="line">* temp        a82282c Modified readme.md</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;如何将Git仓库备份到本地&quot;&gt;&lt;a href=&quot;#如何将Git仓库备份到本地&quot; class=&quot;headerlink&quot; title=&quot;如何将Git仓库备份到本地&quot;&gt;&lt;/a&gt;如何将Git仓库备份到本地&lt;/h3&gt;&lt;h4 id=&quot;常用的传输协议&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://blog.jammelee.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>指定不需要Git管理的文件</title>
    <link href="http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/11.%E6%8C%87%E5%AE%9A%E4%B8%8D%E9%9C%80%E8%A6%81Git%E7%AE%A1%E7%90%86%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/11.%E6%8C%87%E5%AE%9A%E4%B8%8D%E9%9C%80%E8%A6%81Git%E7%AE%A1%E7%90%86%E7%9A%84%E6%96%87%E4%BB%B6/</id>
    <published>2019-10-21T15:18:52.000Z</published>
    <updated>2021-05-16T13:59:42.848Z</updated>
    
    <content type="html"><![CDATA[<h3 id="指定不需要Git管理的文件"><a href="#指定不需要Git管理的文件" class="headerlink" title="指定不需要Git管理的文件"></a>指定不需要Git管理的文件</h3><ul><li>.gitignore文件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir doc #创建一个doc文件夹</span><br><span class="line">$ echo &#x27;hi&#x27; &gt; doc/ignoret #在doc文件夹下创建一个文件</span><br><span class="line">$ git status #查看状态 提示doc目录未被追踪 需要add</span><br><span class="line">On branch temp</span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">doc/</span><br><span class="line">$ vi .gitignore #在工程根目录创建.gitignore文件 写入doc 保存退出</span><br><span class="line">$ git status #查看状态 doc目录不会再被提示未被追踪 说明Git不再管理doc目录</span><br><span class="line">On branch temp</span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">.gitignore</span><br><span class="line"></span><br><span class="line">$ vi .gitignore #在把doc修改为doc/</span><br><span class="line">$ git status #查看状态 doc目录依然不被Git所管理</span><br><span class="line">On branch temp</span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">.gitignore</span><br><span class="line"></span><br><span class="line">$ rm -rf doc #删除doc文件夹</span><br><span class="line">$ echo &#x27;This is file.&#x27; &gt; doc #创建doc文件</span><br><span class="line">$ cat .gitignore</span><br><span class="line">doc/</span><br><span class="line">$ git status #doc文件还是会被Git管理的</span><br><span class="line">On branch temp</span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">.gitignore</span><br><span class="line">doc</span><br><span class="line"></span><br><span class="line">$ vi .gitignore #如果也不想让Git管理doc文件，那么把doc改成doc/就可以了</span><br><span class="line">$ git status</span><br><span class="line">On branch temp</span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">.gitignore</span><br><span class="line"></span><br><span class="line">$ mv .gitignore doc.gitignore #将.gitignore文件名修改为doc.gitignore</span><br><span class="line">$ git status #查看状态 doc就会重新被Git管理 所以文件名必须要是.gitignore</span><br><span class="line">On branch temp</span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">doc</span><br><span class="line">doc.gitignore</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有许多编程语言通用的ignore，GitHub官方都给出了文件示例，可在<a href="https://github.com/github/gitignore">GitHub</a>上查看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;指定不需要Git管理的文件&quot;&gt;&lt;a href=&quot;#指定不需要Git管理的文件&quot; class=&quot;headerlink&quot; title=&quot;指定不需要Git管理的文件&quot;&gt;&lt;/a&gt;指定不需要Git管理的文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;.gitignore文件&lt;/li&gt;
&lt;/
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://blog.jammelee.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>开发中临时加塞了紧急任务应当如何处理</title>
    <link href="http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/10.%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%B4%E6%97%B6%E5%8A%A0%E5%A1%9E%E4%BA%86%E7%B4%A7%E6%80%A5%E4%BB%BB%E5%8A%A1%E5%BA%94%E5%BD%93%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/"/>
    <id>http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/10.%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%B4%E6%97%B6%E5%8A%A0%E5%A1%9E%E4%BA%86%E7%B4%A7%E6%80%A5%E4%BB%BB%E5%8A%A1%E5%BA%94%E5%BD%93%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</id>
    <published>2019-10-21T15:18:14.000Z</published>
    <updated>2021-05-16T13:59:42.848Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开发中临时加塞了紧急任务应当如何处理"><a href="#开发中临时加塞了紧急任务应当如何处理" class="headerlink" title="开发中临时加塞了紧急任务应当如何处理"></a>开发中临时加塞了紧急任务应当如何处理</h3><ul><li>git stash</li></ul><h4 id="将工作区修改的文件放入不影响下步工作的环境中"><a href="#将工作区修改的文件放入不影响下步工作的环境中" class="headerlink" title="将工作区修改的文件放入不影响下步工作的环境中"></a>将工作区修改的文件放入不影响下步工作的环境中</h4><span id="more"></span><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status <span class="comment">#假设工作区中修改了commit3文件</span></span><br><span class="line">On branch temp</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   commit3</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">$ git stash <span class="comment">#存入到不影响下步工作的环境当中</span></span><br><span class="line">Saved working directory and index state WIP on temp: 645c351 Modified commit2</span><br><span class="line">$ git stash list <span class="comment">#查看stash列表，会有一个stash堆栈信息</span></span><br><span class="line">stash@&#123;0&#125;: WIP on temp: 645c351 Modified commit2</span><br><span class="line">$ git status <span class="comment">#查看当前状态 当前工作区是一个干净的工作区 就可以继续下步工作</span></span><br><span class="line">On branch temp</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><h4 id="紧急任务结束，重新恢复到接到紧急任务之前的状态"><a href="#紧急任务结束，重新恢复到接到紧急任务之前的状态" class="headerlink" title="紧急任务结束，重新恢复到接到紧急任务之前的状态"></a>紧急任务结束，重新恢复到接到紧急任务之前的状态</h4><ul><li>不弹出stash <ul><li>git stash apply</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash apply <span class="comment">#重新回到之前的状态，并且这个命令不谈出stash栈中的记录</span></span><br><span class="line">On branch temp</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   commit3</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">$ git stash list <span class="comment">#查看stash列表 之前的stash还存在 并且可以反复使用</span></span><br><span class="line">stash@&#123;0&#125;: WIP on temp: 645c351 Modified commit2</span><br></pre></td></tr></table></figure><ul><li>弹出stash<ul><li>git stash pop</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash pop <span class="comment">#弹出stash 发现最后一行显示丢掉stash@&#123;0&#125;的记录</span></span><br><span class="line">On branch temp</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   commit3</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">Dropped refs/stash@&#123;0&#125; (12397d0ad85cd29f39b1551753533aada85d3d42)</span><br><span class="line">$ git stash list <span class="comment">#再次查看stash列表 已经没有stash记录了</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开发中临时加塞了紧急任务应当如何处理&quot;&gt;&lt;a href=&quot;#开发中临时加塞了紧急任务应当如何处理&quot; class=&quot;headerlink&quot; title=&quot;开发中临时加塞了紧急任务应当如何处理&quot;&gt;&lt;/a&gt;开发中临时加塞了紧急任务应当如何处理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git stash&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;将工作区修改的文件放入不影响下步工作的环境中&quot;&gt;&lt;a href=&quot;#将工作区修改的文件放入不影响下步工作的环境中&quot; class=&quot;headerlink&quot; title=&quot;将工作区修改的文件放入不影响下步工作的环境中&quot;&gt;&lt;/a&gt;将工作区修改的文件放入不影响下步工作的环境中&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="Git" scheme="http://blog.jammelee.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>正确删除文件的方法</title>
    <link href="http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/9.%E6%AD%A3%E7%A1%AE%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/9.%E6%AD%A3%E7%A1%AE%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2019-10-21T15:17:49.000Z</published>
    <updated>2021-05-16T13:59:42.852Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正确删除文件的方法"><a href="#正确删除文件的方法" class="headerlink" title="正确删除文件的方法"></a>正确删除文件的方法</h3><ul><li>git rm [filename]</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm readme.md <span class="comment">#删除工作区的readme.md文件</span></span><br><span class="line">$ git status</span><br><span class="line">On branch temp</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add/rm &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">deleted:    readme.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">$ git rm readme.md <span class="comment">#删除暂存区的readme.md 或者使用add命令更新暂存区</span></span><br><span class="line">$ git status</span><br><span class="line">On branch temp</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">deleted:    readme.md</span><br><span class="line"></span><br><span class="line">$ git reset --hard HEAD <span class="comment">#恢复工作区和暂存区到HEAD指针</span></span><br><span class="line">HEAD is now at 645c351 Modified commit2</span><br><span class="line">$ git status</span><br><span class="line">On branch temp</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">$ git rm readme.md <span class="comment">#使用rm命令删除readme.md</span></span><br><span class="line">rm <span class="string">&#x27;readme.md&#x27;</span></span><br><span class="line">$ git status <span class="comment">#查看状态 发现和先使用rm删除工作区文件 然后再更新暂存区的效果是一样的</span></span><br><span class="line">On branch temp</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">deleted:    readme.md</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;正确删除文件的方法&quot;&gt;&lt;a href=&quot;#正确删除文件的方法&quot; class=&quot;headerlink&quot; title=&quot;正确删除文件的方法&quot;&gt;&lt;/a&gt;正确删除文件的方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git rm [filename]&lt;/li&gt;
&lt;/ul&gt;
&lt;figure
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://blog.jammelee.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>查看指定文件不同提交的差异</title>
    <link href="http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/8.%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E4%B8%8D%E5%90%8C%E6%8F%90%E4%BA%A4%E7%9A%84%E5%B7%AE%E5%BC%82/"/>
    <id>http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/8.%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E4%B8%8D%E5%90%8C%E6%8F%90%E4%BA%A4%E7%9A%84%E5%B7%AE%E5%BC%82/</id>
    <published>2019-10-21T15:17:22.000Z</published>
    <updated>2021-05-16T13:59:42.851Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看指定文件不同提交的差异"><a href="#查看指定文件不同提交的差异" class="headerlink" title="查看指定文件不同提交的差异"></a>查看指定文件不同提交的差异</h3><ul><li>git diff <a href="branch name">address</a> <a href="branch name">address</a> — [filename]</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git diff temp master <span class="comment">#可以查看分支所有文件的差异</span></span><br><span class="line">diff --git a/commit1 b/commit1</span><br><span class="line">index e885be7..33f9a70 100644</span><br><span class="line">--- a/commit1</span><br><span class="line">+++ b/commit1</span><br><span class="line">@@ -1 +1 @@</span><br><span class="line">-Hello,I<span class="string">&#x27;m commit1.     -- Modified by temp.</span></span><br><span class="line"><span class="string">+Hello,I&#x27;</span>m commit1.</span><br><span class="line">diff --git a/commit2 b/commit2</span><br><span class="line">index 827e7ef..e69de29 100644</span><br><span class="line">--- a/commit2</span><br><span class="line">+++ b/commit2</span><br><span class="line">@@ -1 +0,0 @@</span><br><span class="line">-Hello, commit2!</span><br><span class="line">diff --git a/temp.log b/temp.log</span><br><span class="line">deleted file mode 100644</span><br><span class="line">index e69de29..0000000</span><br><span class="line">$ git diff temp master -- commit1 <span class="comment">#可以过滤指定的文件</span></span><br><span class="line">diff --git a/commit1 b/commit1</span><br><span class="line">index e885be7..33f9a70 100644</span><br><span class="line">--- a/commit1</span><br><span class="line">+++ b/commit1</span><br><span class="line">@@ -1 +1 @@</span><br><span class="line">-Hello,I<span class="string">&#x27;m commit1.     -- Modified by temp.</span></span><br><span class="line"><span class="string">+Hello,I&#x27;</span>m commit1.</span><br><span class="line">$ git branch -av</span><br><span class="line">  master 9522b28 modify content</span><br><span class="line">* temp   645c351 Modified commit2</span><br><span class="line">$ git diff 645c351 9522b28 -- commit1 <span class="comment">#通过查看分支 拿到分支的地址 也可以查询指定文件的差异 效果一样</span></span><br><span class="line">diff --git a/commit1 b/commit1</span><br><span class="line">index e885be7..33f9a70 100644</span><br><span class="line">--- a/commit1</span><br><span class="line">+++ b/commit1</span><br><span class="line">@@ -1 +1 @@</span><br><span class="line">-Hello,I<span class="string">&#x27;m commit1.     -- Modified by temp.</span></span><br><span class="line"><span class="string">+Hello,I&#x27;</span>m commit1.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;查看指定文件不同提交的差异&quot;&gt;&lt;a href=&quot;#查看指定文件不同提交的差异&quot; class=&quot;headerlink&quot; title=&quot;查看指定文件不同提交的差异&quot;&gt;&lt;/a&gt;查看指定文件不同提交的差异&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git diff &lt;a href=&quot;br
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://blog.jammelee.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>如何消除最近几次的提交</title>
    <link href="http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/7.%E5%A6%82%E4%BD%95%E6%B6%88%E9%99%A4%E6%9C%80%E8%BF%91%E5%87%A0%E6%AC%A1%E7%9A%84%E6%8F%90%E4%BA%A4/"/>
    <id>http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/7.%E5%A6%82%E4%BD%95%E6%B6%88%E9%99%A4%E6%9C%80%E8%BF%91%E5%87%A0%E6%AC%A1%E7%9A%84%E6%8F%90%E4%BA%A4/</id>
    <published>2019-10-21T15:16:42.000Z</published>
    <updated>2021-05-16T13:59:42.851Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何消除最近几次的提交"><a href="#如何消除最近几次的提交" class="headerlink" title="如何消除最近几次的提交"></a>如何消除最近几次的提交</h3><ul><li>git reset —hard [commit address]</li></ul><p><b style="color:red"> 此命令执行后，缓存区和工作区都会清空，所以一定要确定不需要这些提交信息。慎用此命令。</b><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitk --all <span class="comment">#查看gitk信息 如下图 </span></span><br><span class="line">$ git branch -av <span class="comment">#查看当前分支是不是再temp</span></span><br><span class="line">  master 9522b28 modify content</span><br><span class="line">* temp   59925d6 Modifed temp.log again.</span><br><span class="line">$ git <span class="built_in">log</span> --graph <span class="comment">#查看log 将&quot;Create temp.log（1dda1ee0709c）&quot;之前的提交都清除掉</span></span><br><span class="line">* commit 59925d6552044420a7ce96a2a7f403691bb4e8e2 (HEAD -&gt; temp)</span><br><span class="line">| Author: jiaming &lt;jamme_lee@outlook.com&gt;</span><br><span class="line">| Date:   Tue Jun 4 21:49:31 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     Modifed temp.log again.</span><br><span class="line">| </span><br><span class="line">* commit 469fb6377dfa729ed09640bc6287e5e891615315</span><br><span class="line">| Author: jiaming &lt;jamme_lee@outlook.com&gt;</span><br><span class="line">| Date:   Tue Jun 4 21:47:01 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     Modified temp.log</span><br><span class="line">| </span><br><span class="line">* commit 1dda1ee0709c38ee087a490bf747192d6d9106c8</span><br><span class="line">| Author: jiaming &lt;jamme_lee@outlook.com&gt;</span><br><span class="line">| Date:   Tue Jun 4 21:46:11 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     Create temp.log</span><br><span class="line">| </span><br><span class="line">* commit 9522b28fd3b33c7476620bc6f0a8a99c56bd3049 (master)</span><br><span class="line">| Author: jiaming &lt;jamme_lee@outlook.com&gt;</span><br><span class="line">| Date:   Tue May 28 21:15:31 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     modify content</span><br><span class="line">| </span><br><span class="line">* commit 4628013a080a138d9542a9163b0590e64fd049a8</span><br><span class="line">| Author: jiaming &lt;jamme_lee@outlook.com&gt;</span><br><span class="line">| Date:   Tue May 28 21:04:42 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     fixed confilct</span><br><span class="line">| </span><br><span class="line">* commit 437387c09feefda0188db6789e4873f7c35a2621</span><br><span class="line">| Author: jiaming &lt;jamme_lee@outlook.com&gt;</span><br><span class="line">| Date:   Sun May 26 13:37:51 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     Create and Add three files.</span><br><span class="line">|     Add commit1</span><br><span class="line">|     Add commit2</span><br><span class="line">|     Add commit3</span><br><span class="line">| </span><br><span class="line">* commit 09460ecc7187a8e126891a041457e51e6693636c</span><br><span class="line">| Author: jiaming &lt;jamme_lee@outlook.com&gt;</span><br><span class="line">| Date:   Sun May 19 17:03:02 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     Add add file</span><br><span class="line">$ git reset --hard 1dda1ee0709c <span class="comment">#执行reset命令</span></span><br><span class="line">HEAD is now at 1dda1ee Create temp.log</span><br><span class="line">$ gitk --all <span class="comment">#再次查看gitk 1dda1ee0709c之前的提交全部清除 如下图</span></span><br></pre></td></tr></table></figure></p><h5 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h5><ul><li>清除<code>Create temp.log</code>之前的所有提交</li></ul><p><img src="7.如何消除最近几次的提交/20190604215124.png" alt="img"></p><ul><li>已经清除提交，并且HEAD指针已经指向期望位置</li></ul><p><img src="7.如何消除最近几次的提交/20190604215515.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何消除最近几次的提交&quot;&gt;&lt;a href=&quot;#如何消除最近几次的提交&quot; class=&quot;headerlink&quot; title=&quot;如何消除最近几次的提交&quot;&gt;&lt;/a&gt;如何消除最近几次的提交&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git reset —hard [commit addr
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://blog.jammelee.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>如何让暂存区的文件恢复到和HEAD一样以及如何让工作区的文件恢复到和暂存区一样</title>
    <link href="http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/6.%E5%A6%82%E4%BD%95%E8%AE%A9%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E6%88%90%E5%92%8CHEAD%E4%B8%80%E6%A0%B7%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%AE%A9%E5%B7%A5%E4%BD%9C%E5%8C%BA%E7%9A%84%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E5%88%B0%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E4%B8%80%E6%A0%B7/"/>
    <id>http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/6.%E5%A6%82%E4%BD%95%E8%AE%A9%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E6%88%90%E5%92%8CHEAD%E4%B8%80%E6%A0%B7%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%AE%A9%E5%B7%A5%E4%BD%9C%E5%8C%BA%E7%9A%84%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E5%88%B0%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E4%B8%80%E6%A0%B7/</id>
    <published>2019-10-21T15:16:21.000Z</published>
    <updated>2021-05-16T13:59:42.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何让暂存区的文件恢复到和HEAD一样以及如何让工作区的文件恢复到和暂存区一样"><a href="#如何让暂存区的文件恢复到和HEAD一样以及如何让工作区的文件恢复到和暂存区一样" class="headerlink" title="如何让暂存区的文件恢复到和HEAD一样以及如何让工作区的文件恢复到和暂存区一样"></a>如何让暂存区的文件恢复到和HEAD一样以及如何让工作区的文件恢复到和暂存区一样</h3><h4 id="如何让暂存区的文件恢复到和HEAD一样"><a href="#如何让暂存区的文件恢复到和HEAD一样" class="headerlink" title="如何让暂存区的文件恢复到和HEAD一样"></a>如何让暂存区的文件恢复到和HEAD一样</h4><ul><li>git reset HEAD</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status <span class="comment">#将文件修改好加入暂存区，查看当前状态</span></span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">modified:   a</span><br><span class="line">modified:   abc</span><br><span class="line">$ git reset HEAD <span class="comment">#根据提示 使用reset HEAD命令将所有暂存区文件都还原到HEAD</span></span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">Ma</span><br><span class="line">Mabc</span><br><span class="line">$ git status <span class="comment">#OK，还原成功</span></span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   a</span><br><span class="line">modified:   abc</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">$ git diff --cached <span class="comment">#还可以通过这种方式查看暂存区有没有文件和HEAD存在差异，没有返回证明无差异</span></span><br></pre></td></tr></table></figure><h4 id="如何取消暂存区部分文件的修改"><a href="#如何取消暂存区部分文件的修改" class="headerlink" title="如何取消暂存区部分文件的修改"></a>如何取消暂存区部分文件的修改</h4><ul><li>git reset HEAD —[filename1,filename2,…]</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status <span class="comment">#查看当前目录状态 有三个已经加入暂存区的文件</span></span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">modified:   abc</span><br><span class="line">modified:   add</span><br><span class="line">modified:   commit1</span><br><span class="line"></span><br><span class="line">$ git reset HEAD -- abc commit1 <span class="comment">#使用reset命令只还原abc和commit1文件</span></span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">Mabc</span><br><span class="line">Mcommit1</span><br><span class="line">$ git status <span class="comment">#再次查看目录状态 abc和commit1文件已经从暂存区中被取消</span></span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">modified:   add</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   abc</span><br><span class="line">modified:   commit1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="如何让工作区的文件恢复到和暂存区一样"><a href="#如何让工作区的文件恢复到和暂存区一样" class="headerlink" title="如何让工作区的文件恢复到和暂存区一样"></a>如何让工作区的文件恢复到和暂存区一样</h4><ul><li>git checkout — [filename]</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi a</span><br><span class="line">$ git add a <span class="comment">#假设修改了a文件 并将a加入暂存区</span></span><br><span class="line">$ vi a <span class="comment">#然后觉得a不太好，又修改了内容</span></span><br><span class="line">$ git diff <span class="comment">#修改后查看了工作区和暂存区的差异 发现工作区的修改还不如暂存区</span></span><br><span class="line">diff --git a/a b/a</span><br><span class="line">index 79ca77c..e63ef0c 100644</span><br><span class="line">--- a/a</span><br><span class="line">+++ b/a</span><br><span class="line">@@ -1 +1 @@</span><br><span class="line">-Hello,I<span class="string">&#x27;m a!!!</span></span><br><span class="line"><span class="string">+Hello,I&#x27;</span>m a!!!.....</span><br><span class="line">$ git status <span class="comment">#查看一下当前状态</span></span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">modified:   a</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   a</span><br><span class="line">$ git checkout -- a <span class="comment">#按照上边的提示 忽略对a文件的修改</span></span><br><span class="line">$ git status <span class="comment">#再次查看状态 工作区的修改已经被抹掉</span></span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">modified:   a</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何让暂存区的文件恢复到和HEAD一样以及如何让工作区的文件恢复到和暂存区一样&quot;&gt;&lt;a href=&quot;#如何让暂存区的文件恢复到和HEAD一样以及如何让工作区的文件恢复到和暂存区一样&quot; class=&quot;headerlink&quot; title=&quot;如何让暂存区的文件恢复到和H
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://blog.jammelee.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>比较工作区、暂存区和HEAD之间所含文件的差异</title>
    <link href="http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/5.%E6%AF%94%E8%BE%83%E5%B7%A5%E4%BD%9C%E5%8C%BA%E3%80%81%E6%9A%82%E5%AD%98%E5%8C%BA%E5%92%8CHEAD%E4%B9%8B%E9%97%B4%E6%89%80%E5%90%AB%E6%96%87%E4%BB%B6%E7%9A%84%E5%B7%AE%E5%BC%82/"/>
    <id>http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/5.%E6%AF%94%E8%BE%83%E5%B7%A5%E4%BD%9C%E5%8C%BA%E3%80%81%E6%9A%82%E5%AD%98%E5%8C%BA%E5%92%8CHEAD%E4%B9%8B%E9%97%B4%E6%89%80%E5%90%AB%E6%96%87%E4%BB%B6%E7%9A%84%E5%B7%AE%E5%BC%82/</id>
    <published>2019-10-21T15:15:58.000Z</published>
    <updated>2021-05-16T13:59:42.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="比较工作区、暂存区和HEAD之间所含文件的差异"><a href="#比较工作区、暂存区和HEAD之间所含文件的差异" class="headerlink" title="比较工作区、暂存区和HEAD之间所含文件的差异"></a>比较工作区、暂存区和HEAD之间所含文件的差异</h3><h4 id="比较暂存区和HEAD所含文件的差异"><a href="#比较暂存区和HEAD所含文件的差异" class="headerlink" title="比较暂存区和HEAD所含文件的差异"></a>比较暂存区和HEAD所含文件的差异</h4><ul><li>git diff —cached</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi abc <span class="comment">#修改abc文件内容</span></span><br><span class="line">$ git add abc <span class="comment">#将abc文件添加至暂存区</span></span><br><span class="line">$ git diff --cached <span class="comment">#使用该命令查看暂存区和HEAD所含文件的差别，可以用来检查修改是否是正确的</span></span><br><span class="line">diff --git a/abc b/abc</span><br><span class="line">index 3be8c83..b61830f 100644</span><br><span class="line">--- a/abc</span><br><span class="line">+++ b/abc</span><br><span class="line">@@ -1,5 +1 @@</span><br><span class="line">-&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="string">HEAD</span></span><br><span class="line"><span class="string"> hello,world!</span></span><br><span class="line"><span class="string">-=======</span></span><br><span class="line"><span class="string">-hello,world</span></span><br><span class="line"><span class="string">-&gt;&gt;&gt;&gt;&gt;&gt;&gt; ea0c484... Add hello world in file</span></span><br></pre></td></tr></table></figure><h4 id="比较工作区和暂存区所含文件的差异"><a href="#比较工作区和暂存区所含文件的差异" class="headerlink" title="比较工作区和暂存区所含文件的差异"></a>比较工作区和暂存区所含文件的差异</h4><ul><li>git diff </li><li>git diff — [filename1,filename2,…]</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi a <span class="comment">#修改a文件</span></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   a</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">$ git diff <span class="comment">#查看差异，可以看到a文件的差异</span></span><br><span class="line">diff --git a/a b/a</span><br><span class="line">index 64fa4ac..6780600 100644</span><br><span class="line">--- a/a</span><br><span class="line">+++ b/a</span><br><span class="line">@@ -1 +1 @@</span><br><span class="line">-sssssssiaaaiiiaaaaaa</span><br><span class="line">+Hello,I<span class="string">&#x27;m a.</span></span><br><span class="line"><span class="string">$ vi commit1 #修改commit1文件</span></span><br><span class="line"><span class="string">$ git diff #可以查看到所有修改文件的差异</span></span><br><span class="line"><span class="string">diff --git a/a b/a</span></span><br><span class="line"><span class="string">index 64fa4ac..6780600 100644</span></span><br><span class="line"><span class="string">--- a/a</span></span><br><span class="line"><span class="string">+++ b/a</span></span><br><span class="line"><span class="string">@@ -1 +1 @@</span></span><br><span class="line"><span class="string">-sssssssiaaaiiiaaaaaa</span></span><br><span class="line"><span class="string">+Hello,I&#x27;</span>m a.</span><br><span class="line">diff --git a/commit1 b/commit1</span><br><span class="line">index e69de29..33f9a70 100644</span><br><span class="line">--- a/commit1</span><br><span class="line">+++ b/commit1</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+Hello,I<span class="string">&#x27;m commit1.</span></span><br><span class="line"><span class="string">$ git diff -- a #这里可以使用“--“过滤想要看到的文件名 只看a文件的差异</span></span><br><span class="line"><span class="string">diff --git a/a b/a</span></span><br><span class="line"><span class="string">index 64fa4ac..6780600 100644</span></span><br><span class="line"><span class="string">--- a/a</span></span><br><span class="line"><span class="string">+++ b/a</span></span><br><span class="line"><span class="string">@@ -1 +1 @@</span></span><br><span class="line"><span class="string">-sssssssiaaaiiiaaaaaa</span></span><br><span class="line"><span class="string">+Hello,I&#x27;</span>m a.</span><br><span class="line">$ git diff -- a commit1 <span class="comment">#还可以过滤多个文件名 只看a和commit1文件的差异</span></span><br><span class="line">diff --git a/a b/a</span><br><span class="line">index 64fa4ac..6780600 100644</span><br><span class="line">--- a/a</span><br><span class="line">+++ b/a</span><br><span class="line">@@ -1 +1 @@</span><br><span class="line">-sssssssiaaaiiiaaaaaa</span><br><span class="line">+Hello,I<span class="string">&#x27;m a.</span></span><br><span class="line"><span class="string">diff --git a/commit1 b/commit1</span></span><br><span class="line"><span class="string">index e69de29..33f9a70 100644</span></span><br><span class="line"><span class="string">--- a/commit1</span></span><br><span class="line"><span class="string">+++ b/commit1</span></span><br><span class="line"><span class="string">@@ -0,0 +1 @@</span></span><br><span class="line"><span class="string">+Hello,I&#x27;</span>m commit1.</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;比较工作区、暂存区和HEAD之间所含文件的差异&quot;&gt;&lt;a href=&quot;#比较工作区、暂存区和HEAD之间所含文件的差异&quot; class=&quot;headerlink&quot; title=&quot;比较工作区、暂存区和HEAD之间所含文件的差异&quot;&gt;&lt;/a&gt;比较工作区、暂存区和HEAD之间所
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://blog.jammelee.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>把间隔的几个commit整理成1个</title>
    <link href="http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/4.%E6%8A%8A%E9%97%B4%E9%9A%94%E7%9A%84%E5%87%A0%E4%B8%AAcommit%E6%95%B4%E7%90%86%E6%88%901%E4%B8%AA/"/>
    <id>http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/4.%E6%8A%8A%E9%97%B4%E9%9A%94%E7%9A%84%E5%87%A0%E4%B8%AAcommit%E6%95%B4%E7%90%86%E6%88%901%E4%B8%AA/</id>
    <published>2019-10-21T15:15:10.000Z</published>
    <updated>2021-05-16T13:59:42.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="把间隔的几个commit整理成1个"><a href="#把间隔的几个commit整理成1个" class="headerlink" title="把间隔的几个commit整理成1个"></a>把间隔的几个commit整理成1个</h3><ul><li>git rebase -i [address]</li></ul><p>再次用到这个命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph <span class="comment">#查看日志 把两个关于readme的commit合并</span></span><br><span class="line">* commit 9f2603b5aac31b0607312a51224a9691ed0670b4 (HEAD -&gt; master)</span><br><span class="line">| Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| Date:   Sun May 26 13:37:51 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     Create and Add three files.</span><br><span class="line">|     Add commit1</span><br><span class="line">|     Add commit2</span><br><span class="line">|     Add commit3</span><br><span class="line">|   </span><br><span class="line">*   commit f7b88f55dc358c375cbbc26db54e7e87b551c518</span><br><span class="line">|\  Merge: 9e63410 d2c1d2b</span><br><span class="line">| | Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| | Date:   Sun May 26 13:34:46 2019 +0800</span><br><span class="line">| | </span><br><span class="line">| |     Merge all branch</span><br><span class="line">| | </span><br><span class="line">| * commit d2c1d2b68622e6ee11c2070eb36406ccb0e63655</span><br><span class="line">| | Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| | Date:   Sun May 19 17:03:02 2019 +0800</span><br><span class="line">| | </span><br><span class="line">| |     Add add file</span><br><span class="line">| | </span><br><span class="line">| * commit ea0c4843f5ee874f4d96646d7f3a8a3adb1432f0</span><br><span class="line">| | Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| | Date:   Sun May 19 16:33:15 2019 +0800</span><br><span class="line">| | </span><br><span class="line">| |     Add hello world <span class="keyword">in</span> file</span><br><span class="line">| |   </span><br><span class="line">* |   commit 9e63410fee4af12a8e9855d2cb6ac81a977b821e</span><br><span class="line">|\ \  Merge: 1da4f5a 2241da2</span><br><span class="line">| | | Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| | | Date:   Sun May 26 13:33:20 2019 +0800</span><br><span class="line">| | | </span><br><span class="line">| | |     Merge branch <span class="string">&#x27;fix_add1&#x27;</span></span><br><span class="line">| | | </span><br><span class="line">| * | commit 2241da25049ad63dea9f20b094b858f0b533ed61</span><br><span class="line">| | | Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| | | Date:   Sun May 19 17:01:01 2019 +0800</span><br><span class="line">| | | </span><br><span class="line">| | |     Add <span class="string">&quot;!&quot;</span></span><br><span class="line">| | | </span><br><span class="line">| * | commit 4e43c01c8f3c76aedd986d598a00b90809a3a588</span><br><span class="line">| |/  Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| |   Date:   Sun May 19 16:33:15 2019 +0800</span><br><span class="line">| |   </span><br><span class="line">| |       Add hello world</span><br><span class="line">| |   </span><br><span class="line">* |   commit 1da4f5a22942c99a466508cdea306619dd5c48b0</span><br><span class="line">|\ \  Merge: 4b6999e 543c5d8</span><br><span class="line">| | | Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| | | Date:   Sat May 25 18:27:23 2019 +0800</span><br><span class="line">| | | </span><br><span class="line">| | |     Merge branch temp</span><br><span class="line">| | | </span><br><span class="line">| * | commit 543c5d84e8b5f2996e1a40745262f39df95eebaf</span><br><span class="line">| | | Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| | | Date:   Mon Apr 29 22:12:57 2019 +0800</span><br><span class="line">| | | </span><br><span class="line">| | |     add <span class="built_in">test</span></span><br><span class="line">| | | </span><br><span class="line">* | | commit 4b6999eecb60df46af36c5409e3737e44b877dd7</span><br><span class="line">| |/  Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">|/|   Date:   Sun May 19 13:50:07 2019 +0800</span><br><span class="line">| |   </span><br><span class="line">| |       create folder and file</span><br><span class="line">| | </span><br><span class="line">* | commit 6d4192be4c570363865468870d14f59efaa5521e</span><br><span class="line">| | Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| | Date:   Sun May 19 13:46:22 2019 +0800</span><br><span class="line">| | </span><br><span class="line">| |     create abc</span><br><span class="line">| | </span><br><span class="line">* | commit 4d2bdddf4098e40ce57fdaf04bb862f7bea04918 <span class="comment">#这条</span></span><br><span class="line">|/  Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">|   Date:   Mon Apr 29 21:36:15 2019 +0800</span><br><span class="line">|   </span><br><span class="line">|       rename</span><br><span class="line">| </span><br><span class="line">* commit d34df54beffb33cf6e4f4e97d0f0e24f2b676d51 (tag: <span class="built_in">test</span>)</span><br><span class="line">| Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| Date:   Mon Apr 29 21:02:02 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     学习工作区和暂存区</span><br><span class="line">| </span><br><span class="line">* commit 33f7ae4c4d4da85453ed0077670e242b71d0a621 <span class="comment">#还有这条</span></span><br><span class="line">  Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">  Date:   Sun Apr 28 22:19:09 2019 +0800</span><br><span class="line">  </span><br><span class="line">      Add readme</span><br><span class="line">$ git rebase -i 33f7ae4c4 <span class="comment">#因为“Add readme“这条commit已经是最父亲节点 所以就选这条commit地址 弹出交互界面 如下图</span></span><br><span class="line">The previous cherry-pick is now empty, possibly due to conflict resolution.</span><br><span class="line">If you wish to commit it anyway, use:</span><br><span class="line"></span><br><span class="line">    git commit --allow-empty</span><br><span class="line"></span><br><span class="line">Otherwise, please use <span class="string">&#x27;git reset&#x27;</span></span><br><span class="line">interactive rebase <span class="keyword">in</span> progress; onto 33f7ae4</span><br><span class="line">Last <span class="built_in">command</span> <span class="keyword">done</span> (1 <span class="built_in">command</span> <span class="keyword">done</span>):</span><br><span class="line">   pick 33f7ae4 </span><br><span class="line">Next commands to <span class="keyword">do</span> (10 remaining commands):</span><br><span class="line">   squash 4d2bddd rename</span><br><span class="line">   pick d34df54 学习工作区和暂存区</span><br><span class="line">You are currently rebasing branch <span class="string">&#x27;master&#x27;</span> on <span class="string">&#x27;33f7ae4&#x27;</span>.</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">Could not apply 33f7ae4... </span><br><span class="line">$ git status <span class="comment">#查看当前状态</span></span><br><span class="line">interactive rebase <span class="keyword">in</span> progress; onto 33f7ae4</span><br><span class="line">Last <span class="built_in">command</span> <span class="keyword">done</span> (1 <span class="built_in">command</span> <span class="keyword">done</span>):</span><br><span class="line">   pick 33f7ae4 </span><br><span class="line">Next commands to <span class="keyword">do</span> (10 remaining commands):</span><br><span class="line">   squash 4d2bddd rename</span><br><span class="line">   pick d34df54 学习工作区和暂存区</span><br><span class="line">  (use <span class="string">&quot;git rebase --edit-todo&quot;</span> to view and edit)</span><br><span class="line">You are currently rebasing branch <span class="string">&#x27;master&#x27;</span> on <span class="string">&#x27;33f7ae4&#x27;</span>.</span><br><span class="line">  (all conflicts fixed: run <span class="string">&quot;git rebase --continue&quot;</span>)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">$ git rebase --<span class="built_in">continue</span> <span class="comment">#根据提示使用&quot;git rebase --continue&quot;命令 弹出交互界面 如下图</span></span><br><span class="line">[detached HEAD 83f44c9] Add readme.md</span><br><span class="line"> Date: Sun Apr 28 22:19:09 2019 +0800</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 readme.md</span><br><span class="line">CONFLICT (modify/delete): readme deleted <span class="keyword">in</span> HEAD and modified <span class="keyword">in</span> 543c5d8... add <span class="built_in">test</span>. Version 543c5d8... add <span class="built_in">test</span> of readme left <span class="keyword">in</span> tree.</span><br><span class="line">error: could not apply 543c5d8... add <span class="built_in">test</span></span><br><span class="line">Resolve all conflicts manually, mark them as resolved with</span><br><span class="line"><span class="string">&quot;git add/rm &lt;conflicted_files&gt;&quot;</span>, <span class="keyword">then</span> run <span class="string">&quot;git rebase --continue&quot;</span>.</span><br><span class="line">You can instead skip this commit: run <span class="string">&quot;git rebase --skip&quot;</span>.</span><br><span class="line">To abort and get back to the state before <span class="string">&quot;git rebase&quot;</span>, run <span class="string">&quot;git rebase --abort&quot;</span>.</span><br><span class="line">Could not apply 543c5d8... add <span class="built_in">test</span></span><br><span class="line">$ git status <span class="comment">#查看状态 因为之前修改文件名后，合并分支的时候我将冲突文件readme添加进git库 所以这里出了冲突 这里我按照提示删掉readme文件（根据自己情况处理） </span></span><br><span class="line">interactive rebase <span class="keyword">in</span> progress; onto 33f7ae4</span><br><span class="line">Last commands <span class="keyword">done</span> (6 commands <span class="keyword">done</span>):</span><br><span class="line">   pick 4b6999e create folder and file</span><br><span class="line">   pick 543c5d8 add <span class="built_in">test</span></span><br><span class="line">  (see more <span class="keyword">in</span> file .git/rebase-merge/<span class="keyword">done</span>)</span><br><span class="line">Next commands to <span class="keyword">do</span> (5 remaining commands):</span><br><span class="line">   pick 4e43c01 Add hello world</span><br><span class="line">   pick 2241da2 Add <span class="string">&quot;!&quot;</span></span><br><span class="line">  (use <span class="string">&quot;git rebase --edit-todo&quot;</span> to view and edit)</span><br><span class="line">You are currently rebasing branch <span class="string">&#x27;master&#x27;</span> on <span class="string">&#x27;33f7ae4&#x27;</span>.</span><br><span class="line">  (fix conflicts and <span class="keyword">then</span> run <span class="string">&quot;git rebase --continue&quot;</span>)</span><br><span class="line">  (use <span class="string">&quot;git rebase --skip&quot;</span> to skip this patch)</span><br><span class="line">  (use <span class="string">&quot;git rebase --abort&quot;</span> to check out the original branch)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">  (use <span class="string">&quot;git add/rm &lt;file&gt;...&quot;</span> as appropriate to mark resolution)</span><br><span class="line"></span><br><span class="line">deleted by us:   readme</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">$ git rm readme <span class="comment">#删除readme</span></span><br><span class="line">readme: needs merge</span><br><span class="line">rm <span class="string">&#x27;readme&#x27;</span></span><br><span class="line">$ git status <span class="comment">#查看状态</span></span><br><span class="line">interactive rebase <span class="keyword">in</span> progress; onto 33f7ae4</span><br><span class="line">Last commands <span class="keyword">done</span> (6 commands <span class="keyword">done</span>):</span><br><span class="line">   pick 4b6999e create folder and file</span><br><span class="line">   pick 543c5d8 add <span class="built_in">test</span></span><br><span class="line">  (see more <span class="keyword">in</span> file .git/rebase-merge/<span class="keyword">done</span>)</span><br><span class="line">Next commands to <span class="keyword">do</span> (5 remaining commands):</span><br><span class="line">   pick 4e43c01 Add hello world</span><br><span class="line">   pick 2241da2 Add <span class="string">&quot;!&quot;</span></span><br><span class="line">  (use <span class="string">&quot;git rebase --edit-todo&quot;</span> to view and edit)</span><br><span class="line">You are currently rebasing branch <span class="string">&#x27;master&#x27;</span> on <span class="string">&#x27;33f7ae4&#x27;</span>.</span><br><span class="line">  (all conflicts fixed: run <span class="string">&quot;git rebase --continue&quot;</span>)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">$ git rebase --<span class="built_in">continue</span> <span class="comment">#根据提示执行命令</span></span><br><span class="line">Auto-merging abc</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> abc</span><br><span class="line">error: could not apply ea0c484... Add hello world <span class="keyword">in</span> file</span><br><span class="line">Resolve all conflicts manually, mark them as resolved with</span><br><span class="line"><span class="string">&quot;git add/rm &lt;conflicted_files&gt;&quot;</span>, <span class="keyword">then</span> run <span class="string">&quot;git rebase --continue&quot;</span>.</span><br><span class="line">You can instead skip this commit: run <span class="string">&quot;git rebase --skip&quot;</span>.</span><br><span class="line">To abort and get back to the state before <span class="string">&quot;git rebase&quot;</span>, run <span class="string">&quot;git rebase --abort&quot;</span>.</span><br><span class="line">Could not apply ea0c484... Add hello world <span class="keyword">in</span> file</span><br><span class="line">$ git rebase --<span class="built_in">continue</span> <span class="comment">#我又执行了一次</span></span><br><span class="line">abc: needs merge</span><br><span class="line">You must edit all merge conflicts and <span class="keyword">then</span></span><br><span class="line">mark them as resolved using git add</span><br><span class="line">$ git status <span class="comment">#发现是还有冲突没有解决</span></span><br><span class="line">interactive rebase <span class="keyword">in</span> progress; onto 33f7ae4</span><br><span class="line">Last commands <span class="keyword">done</span> (9 commands <span class="keyword">done</span>):</span><br><span class="line">   pick 2241da2 Add <span class="string">&quot;!&quot;</span></span><br><span class="line">   pick ea0c484 Add hello world <span class="keyword">in</span> file</span><br><span class="line">  (see more <span class="keyword">in</span> file .git/rebase-merge/<span class="keyword">done</span>)</span><br><span class="line">Next commands to <span class="keyword">do</span> (2 remaining commands):</span><br><span class="line">   pick d2c1d2b Add add file</span><br><span class="line">   pick 9f2603b Create and Add three files. Add commit1 Add commit2 Add commit3</span><br><span class="line">  (use <span class="string">&quot;git rebase --edit-todo&quot;</span> to view and edit)</span><br><span class="line">You are currently rebasing branch <span class="string">&#x27;master&#x27;</span> on <span class="string">&#x27;33f7ae4&#x27;</span>.</span><br><span class="line">  (fix conflicts and <span class="keyword">then</span> run <span class="string">&quot;git rebase --continue&quot;</span>)</span><br><span class="line">  (use <span class="string">&quot;git rebase --skip&quot;</span> to skip this patch)</span><br><span class="line">  (use <span class="string">&quot;git rebase --abort&quot;</span> to check out the original branch)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution)</span><br><span class="line"></span><br><span class="line">both modified:   abc</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">$ git add abc <span class="comment">#添加暂存区</span></span><br><span class="line">$ git commit -m<span class="string">&#x27;Modified abc file&#x27;</span> <span class="comment">#提交</span></span><br><span class="line">[detached HEAD 9e902c5] Modified abc file</span><br><span class="line"> 1 file changed, 4 insertions(+)</span><br><span class="line">$ git status <span class="comment">#查看状态</span></span><br><span class="line">interactive rebase <span class="keyword">in</span> progress; onto 33f7ae4</span><br><span class="line">Last commands <span class="keyword">done</span> (9 commands <span class="keyword">done</span>):</span><br><span class="line">   pick 2241da2 Add <span class="string">&quot;!&quot;</span></span><br><span class="line">   pick ea0c484 Add hello world <span class="keyword">in</span> file</span><br><span class="line">  (see more <span class="keyword">in</span> file .git/rebase-merge/<span class="keyword">done</span>)</span><br><span class="line">Next commands to <span class="keyword">do</span> (2 remaining commands):</span><br><span class="line">   pick d2c1d2b Add add file</span><br><span class="line">   pick 9f2603b Create and Add three files. Add commit1 Add commit2 Add commit3</span><br><span class="line">  (use <span class="string">&quot;git rebase --edit-todo&quot;</span> to view and edit)</span><br><span class="line">You are currently editing a commit <span class="keyword">while</span> rebasing branch <span class="string">&#x27;master&#x27;</span> on <span class="string">&#x27;33f7ae4&#x27;</span>.</span><br><span class="line">  (use <span class="string">&quot;git commit --amend&quot;</span> to amend the current commit)</span><br><span class="line">  (use <span class="string">&quot;git rebase --continue&quot;</span> once you are satisfied with your changes)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">$ git rebase --<span class="built_in">continue</span> <span class="comment">#再次执行continue rebase成功</span></span><br><span class="line">Successfully rebased and updated refs/heads/master.</span><br><span class="line">$ git <span class="built_in">log</span> --graph <span class="comment">#查看log 之前“readme”这条log已经没有了 被合并进了根节点</span></span><br><span class="line">* commit 437387c09feefda0188db6789e4873f7c35a2621 (HEAD -&gt; master)</span><br><span class="line">| Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| Date:   Sun May 26 13:37:51 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     Create and Add three files.</span><br><span class="line">|     Add commit1</span><br><span class="line">|     Add commit2</span><br><span class="line">|     Add commit3</span><br><span class="line">| </span><br><span class="line">* commit 09460ecc7187a8e126891a041457e51e6693636c</span><br><span class="line">| Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| Date:   Sun May 19 17:03:02 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     Add add file</span><br><span class="line">| </span><br><span class="line">* commit 9e902c5dd82e1ce7c4831d8b3ff46d32b409542c</span><br><span class="line">| Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| Date:   Mon May 27 21:47:37 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     Modified abc file</span><br><span class="line">| </span><br><span class="line">* commit 21f4c7efb6177246d01cae84ccb2368728577aa4</span><br><span class="line">| Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| Date:   Sun May 19 17:01:01 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     Add <span class="string">&quot;!&quot;</span></span><br><span class="line">| </span><br><span class="line">* commit 6d43e3783cc37f9490781622f56c36ae2901ab43</span><br><span class="line">| Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| Date:   Sun May 19 16:33:15 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     Add hello world</span><br><span class="line">| </span><br><span class="line">* commit d463612e828044748283c6cc3a2c3a5bfb9a3386</span><br><span class="line">| Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| Date:   Sun May 19 13:50:07 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     create folder and file</span><br><span class="line">| </span><br><span class="line">* commit d88fcba14a272fd0f20f9e65315d6ed9c0db225a</span><br><span class="line">| Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| Date:   Sun May 19 13:46:22 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     create abc</span><br><span class="line">| </span><br><span class="line">* commit 3a1b19fa89e0e229f40b3bcc0bbf1f079d19b83f</span><br><span class="line">| Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| Date:   Mon Apr 29 21:02:02 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     学习工作区和暂存区</span><br><span class="line">| </span><br><span class="line">* commit 83f44c95d9456236929918dc7717a2bb9b452d93</span><br><span class="line">  Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">  Date:   Sun Apr 28 22:19:09 2019 +0800</span><br><span class="line">  </span><br><span class="line">      Add readme.md</span><br><span class="line">      </span><br><span class="line">      Add readme</span><br><span class="line">      </span><br><span class="line">      rename</span><br></pre></td></tr></table></figure><h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><ul><li>交互界面</li></ul><p><img src="4.把间隔的几个commit整理成1个/20190527213906.png" alt="img"></p><ul><li>将根节点的commit地址拷贝，加入第一行pick [address]，然后将原来rename那条commit复制到第一行的下边，并使用squash命令，保存退出。</li></ul><p><img src="4.把间隔的几个commit整理成1个/20190527214015.png" alt="img"></p><ul><li>git rebase —continue</li></ul><p><img src="4.把间隔的几个commit整理成1个/20190527214324.png" alt="img"></p><ul><li>添加message，保存退出。</li></ul><p><img src="4.把间隔的几个commit整理成1个/20190527214424.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;把间隔的几个commit整理成1个&quot;&gt;&lt;a href=&quot;#把间隔的几个commit整理成1个&quot; class=&quot;headerlink&quot; title=&quot;把间隔的几个commit整理成1个&quot;&gt;&lt;/a&gt;把间隔的几个commit整理成1个&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git 
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://blog.jammelee.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>把连续的多个commit整理成1个</title>
    <link href="http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/3.%E6%8A%8A%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%A4%9A%E4%B8%AAcommit%E6%95%B4%E7%90%86%E6%88%901%E4%B8%AA/"/>
    <id>http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/3.%E6%8A%8A%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%A4%9A%E4%B8%AAcommit%E6%95%B4%E7%90%86%E6%88%901%E4%B8%AA/</id>
    <published>2019-10-21T15:14:45.000Z</published>
    <updated>2021-05-16T13:59:42.849Z</updated>
    
    <content type="html"><![CDATA[<h3 id="把连续的多个commit整理成1个"><a href="#把连续的多个commit整理成1个" class="headerlink" title="把连续的多个commit整理成1个"></a>把连续的多个commit整理成1个</h3><h4 id="git-rebase-i-address"><a href="#git-rebase-i-address" class="headerlink" title="git rebase -i [address]"></a>git rebase -i [address]</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -6 <span class="comment">#查看log 合并最近三条commit</span></span><br><span class="line">commit ce2abde0bf171ac220701f921fb7c80d59d1cabb (HEAD -&gt; master)</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 26 13:38:08 2019 +0800</span><br><span class="line"></span><br><span class="line">    Add commit3</span><br><span class="line"></span><br><span class="line">commit 2805221941eea19d8fea0acf26674af8315e5a3b</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 26 13:37:59 2019 +0800</span><br><span class="line"></span><br><span class="line">    Add commit2</span><br><span class="line"></span><br><span class="line">commit 40b8a74be089723d8609f8561972069d045e33a2</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 26 13:37:51 2019 +0800</span><br><span class="line"></span><br><span class="line">    Add commit1</span><br><span class="line"></span><br><span class="line">commit f7b88f55dc358c375cbbc26db54e7e87b551c518</span><br><span class="line">Merge: 9e63410 d2c1d2b</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 26 13:34:46 2019 +0800</span><br><span class="line"></span><br><span class="line">    Merge all branch</span><br><span class="line"></span><br><span class="line">commit 9e63410fee4af12a8e9855d2cb6ac81a977b821e</span><br><span class="line">Merge: 1da4f5a 2241da2</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 26 13:33:20 2019 +0800</span><br><span class="line"></span><br><span class="line">    Merge branch <span class="string">&#x27;fix_add1&#x27;</span></span><br><span class="line"></span><br><span class="line">commit d2c1d2b68622e6ee11c2070eb36406ccb0e63655</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 19 17:03:02 2019 +0800</span><br><span class="line"></span><br><span class="line">    Add add file</span><br><span class="line">$ git rebase -i f7b88f55dc35 <span class="comment">#取父亲节点地址 弹出两次交互界面 如下图</span></span><br><span class="line">[detached HEAD 9f2603b] Create and Add three files. Add commit1 Add commit2 Add commit3</span><br><span class="line"> Date: Sun May 26 13:37:51 2019 +0800</span><br><span class="line"> 3 files changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 commit1</span><br><span class="line"> create mode 100644 commit2</span><br><span class="line"> create mode 100644 commit3</span><br><span class="line">Successfully rebased and updated refs/heads/master.</span><br><span class="line">$ git <span class="built_in">log</span> -6 --graph <span class="comment">#再次查看log 已经合并成功 并生成了新的commit对象</span></span><br><span class="line">* commit 9f2603b5aac31b0607312a51224a9691ed0670b4 (HEAD -&gt; master)</span><br><span class="line">| Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| Date:   Sun May 26 13:37:51 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     Create and Add three files.</span><br><span class="line">|     Add commit1</span><br><span class="line">|     Add commit2</span><br><span class="line">|     Add commit3</span><br><span class="line">|   </span><br><span class="line">*   commit f7b88f55dc358c375cbbc26db54e7e87b551c518</span><br><span class="line">|\  Merge: 9e63410 d2c1d2b</span><br><span class="line">| | Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| | Date:   Sun May 26 13:34:46 2019 +0800</span><br><span class="line">| | </span><br><span class="line">| |     Merge all branch</span><br><span class="line">| | </span><br><span class="line">| * commit d2c1d2b68622e6ee11c2070eb36406ccb0e63655</span><br><span class="line">| | Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| | Date:   Sun May 19 17:03:02 2019 +0800</span><br><span class="line">| | </span><br><span class="line">| |     Add add file</span><br><span class="line">| | </span><br><span class="line">| * commit ea0c4843f5ee874f4d96646d7f3a8a3adb1432f0</span><br><span class="line">| | Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| | Date:   Sun May 19 16:33:15 2019 +0800</span><br><span class="line">| | </span><br><span class="line">| |     Add hello world <span class="keyword">in</span> file</span><br><span class="line">| |   </span><br><span class="line">* |   commit 9e63410fee4af12a8e9855d2cb6ac81a977b821e</span><br><span class="line">|\ \  Merge: 1da4f5a 2241da2</span><br><span class="line">| | | Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| | | Date:   Sun May 26 13:33:20 2019 +0800</span><br><span class="line">| | | </span><br><span class="line">| | |     Merge branch <span class="string">&#x27;fix_add1&#x27;</span></span><br><span class="line">| | | </span><br><span class="line">| * | commit 2241da25049ad63dea9f20b094b858f0b533ed61</span><br><span class="line">| | | Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| | | Date:   Sun May 19 17:01:01 2019 +0800</span><br><span class="line">| | | </span><br><span class="line">| | |     Add <span class="string">&quot;!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><ul><li>执行“git rebase -i f7b88f55dc35”命令后，弹出第一个交互</li></ul><p><img src="3.把连续的多个commit整理成1个/20190526132915.png" alt="img"></p><ul><li>选择squash命令，修改pick为s，保存退出</li></ul><p><img src="3.把连续的多个commit整理成1个/20190526132924.png" alt="img"></p><ul><li>第二个交互界面</li></ul><p><img src="3.把连续的多个commit整理成1个/20190526155824.png" alt="img"></p><ul><li>插入新message，保留旧的message，保存退出</li></ul><p><img src="3.把连续的多个commit整理成1个/20190526160006.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;把连续的多个commit整理成1个&quot;&gt;&lt;a href=&quot;#把连续的多个commit整理成1个&quot; class=&quot;headerlink&quot; title=&quot;把连续的多个commit整理成1个&quot;&gt;&lt;/a&gt;把连续的多个commit整理成1个&lt;/h3&gt;&lt;h4 id=&quot;git-r
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://blog.jammelee.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>修改commit的message</title>
    <link href="http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.%E4%BF%AE%E6%94%B9commit%E7%9A%84message/"/>
    <id>http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/2.%E4%BF%AE%E6%94%B9commit%E7%9A%84message/</id>
    <published>2019-10-21T15:14:13.000Z</published>
    <updated>2021-05-16T13:59:42.849Z</updated>
    
    <content type="html"><![CDATA[<h3 id="修改commit的message"><a href="#修改commit的message" class="headerlink" title="修改commit的message"></a>修改commit的message</h3><h4 id="修改最新commit的message"><a href="#修改最新commit的message" class="headerlink" title="修改最新commit的message"></a>修改最新commit的message</h4><ul><li>$ git commit —amend<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment">#先查看log 第一条信息为merge branch temp</span></span><br><span class="line">commit 5524853e5b062ee5536925dc1e6a8b70db415253 (HEAD -&gt; master)</span><br><span class="line">Merge: 4b6999e 543c5d8</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sat May 25 18:27:23 2019 +0800</span><br><span class="line"></span><br><span class="line">    merge branch temp</span><br><span class="line"></span><br><span class="line">commit 4b6999eecb60df46af36c5409e3737e44b877dd7</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 19 13:50:07 2019 +0800</span><br><span class="line"></span><br><span class="line">    create folder and file</span><br><span class="line"></span><br><span class="line">commit 6d4192be4c570363865468870d14f59efaa5521e</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 19 13:46:22 2019 +0800</span><br><span class="line"></span><br><span class="line">    create abc</span><br><span class="line"></span><br><span class="line">commit 543c5d84e8b5f2996e1a40745262f39df95eebaf</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Mon Apr 29 22:12:57 2019 +0800</span><br><span class="line"></span><br><span class="line">    add <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">commit 4d2bdddf4098e40ce57fdaf04bb862f7bea04918</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Mon Apr 29 21:36:15 2019 +0800</span><br><span class="line"></span><br><span class="line">    rename</span><br><span class="line"></span><br><span class="line">commit d34df54beffb33cf6e4f4e97d0f0e24f2b676d51 (tag: <span class="built_in">test</span>)</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Mon Apr 29 21:02:02 2019 +0800</span><br><span class="line"></span><br><span class="line">    学习工作区和暂存区</span><br><span class="line"></span><br><span class="line">commit 33f7ae4c4d4da85453ed0077670e242b71d0a621</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun Apr 28 22:19:09 2019 +0800</span><br><span class="line"></span><br><span class="line">    Add readme</span><br><span class="line">$ git commit --amend <span class="comment">#将merge改成Merge</span></span><br><span class="line">[master 1da4f5a] Merge branch temp</span><br><span class="line"> Date: Sat May 25 18:27:23 2019 +0800</span><br><span class="line">$ git <span class="built_in">log</span> <span class="comment">#再次查看 message已经被修改</span></span><br><span class="line">commit 1da4f5a22942c99a466508cdea306619dd5c48b0 (HEAD -&gt; master)</span><br><span class="line">Merge: 4b6999e 543c5d8</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sat May 25 18:27:23 2019 +0800</span><br><span class="line"></span><br><span class="line">    Merge branch temp</span><br><span class="line"></span><br><span class="line">commit 4b6999eecb60df46af36c5409e3737e44b877dd7</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 19 13:50:07 2019 +0800</span><br><span class="line"></span><br><span class="line">    create folder and file</span><br><span class="line"></span><br><span class="line">commit 6d4192be4c570363865468870d14f59efaa5521e</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 19 13:46:22 2019 +0800</span><br><span class="line"></span><br><span class="line">    create abc</span><br><span class="line"></span><br><span class="line">commit 543c5d84e8b5f2996e1a40745262f39df95eebaf</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Mon Apr 29 22:12:57 2019 +0800</span><br><span class="line"></span><br><span class="line">    add <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">commit 4d2bdddf4098e40ce57fdaf04bb862f7bea04918</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Mon Apr 29 21:36:15 2019 +0800</span><br><span class="line"></span><br><span class="line">    rename</span><br><span class="line"></span><br><span class="line">commit d34df54beffb33cf6e4f4e97d0f0e24f2b676d51 (tag: <span class="built_in">test</span>)</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Mon Apr 29 21:02:02 2019 +0800</span><br><span class="line"></span><br><span class="line">    学习工作区和暂存区</span><br><span class="line"></span><br><span class="line">commit 33f7ae4c4d4da85453ed0077670e242b71d0a621</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun Apr 28 22:19:09 2019 +0800</span><br><span class="line"></span><br><span class="line">    Add readme</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改老旧commit的message"><a href="#修改老旧commit的message" class="headerlink" title="修改老旧commit的message"></a>修改老旧commit的message</h4></li><li>$ git rebase -i 6d4192be<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -3 <span class="comment">#查看近三次的log</span></span><br><span class="line">commit d2c1d2b68622e6ee11c2070eb36406ccb0e63655 (HEAD -&gt; fix_add)</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 19 17:03:02 2019 +0800</span><br><span class="line"></span><br><span class="line">    Add add file</span><br><span class="line"></span><br><span class="line">commit ea0c4843f5ee874f4d96646d7f3a8a3adb1432f0</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 19 16:33:15 2019 +0800</span><br><span class="line"></span><br><span class="line">    Add hello world</span><br><span class="line"></span><br><span class="line">commit 6d4192be4c570363865468870d14f59efaa5521e</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 19 13:46:22 2019 +0800</span><br><span class="line"></span><br><span class="line">    create abc</span><br><span class="line">$ git rebase -i 6d4192be <span class="comment">#使用rebase命令 选择需要修改message的父亲commit地址 会弹出交互界面 如下图</span></span><br><span class="line">[detached HEAD ea0c484] Add hello world <span class="keyword">in</span> file</span><br><span class="line"> Date: Sun May 19 16:33:15 2019 +0800</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">Successfully rebased and updated refs/heads/fix_add. <span class="comment">#这里表示修改成功</span></span><br><span class="line">$ git branch -av</span><br><span class="line">* fix_add  d2c1d2b Add add file</span><br><span class="line">  fix_add1 2241da2 Add <span class="string">&quot;!&quot;</span></span><br><span class="line">  master   1da4f5a Merge branch temp</span><br><span class="line">$ git <span class="built_in">log</span> -n3 --graph <span class="comment">#查看log 已经将Add hello world成功修改为Add hello world in file</span></span><br><span class="line">* commit d2c1d2b68622e6ee11c2070eb36406ccb0e63655 (HEAD -&gt; fix_add)</span><br><span class="line">| Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| Date:   Sun May 19 17:03:02 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     Add add file</span><br><span class="line">| </span><br><span class="line">* commit ea0c4843f5ee874f4d96646d7f3a8a3adb1432f0</span><br><span class="line">| Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| Date:   Sun May 19 16:33:15 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     Add hello world <span class="keyword">in</span> file</span><br><span class="line">| </span><br><span class="line">* commit 6d4192be4c570363865468870d14f59efaa5521e</span><br><span class="line">| Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">| Date:   Sun May 19 13:46:22 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     create abc</span><br></pre></td></tr></table></figure><h5 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h5><img src="2.修改commit的message/20190525213324.png" alt="img"></li><li>将pick改为reword简称r，然后退出保存</li></ul><p><img src="2.修改commit的message/20190525213433.png" alt="img"></p><ul><li>退出保存后，会弹出一个新的交互界面，将message修改为新的message，保存退出即可。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;修改commit的message&quot;&gt;&lt;a href=&quot;#修改commit的message&quot; class=&quot;headerlink&quot; title=&quot;修改commit的message&quot;&gt;&lt;/a&gt;修改commit的message&lt;/h3&gt;&lt;h4 id=&quot;修改最新commi
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://blog.jammelee.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>删除不需要的分支</title>
    <link href="http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/1.%E5%88%A0%E9%99%A4%E4%B8%8D%E9%9C%80%E8%A6%81%E7%9A%84%E5%88%86%E6%94%AF/"/>
    <id>http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%BA%8C%E7%AB%A0/1.%E5%88%A0%E9%99%A4%E4%B8%8D%E9%9C%80%E8%A6%81%E7%9A%84%E5%88%86%E6%94%AF/</id>
    <published>2019-10-21T15:13:55.000Z</published>
    <updated>2021-05-16T13:59:42.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="删除不需要的分支"><a href="#删除不需要的分支" class="headerlink" title="删除不需要的分支"></a>删除不需要的分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -av <span class="comment">#查看分支 假设我们不需要temp分支</span></span><br><span class="line">  fix_add  fd98d3d Add add file</span><br><span class="line">  fix_add1 2241da2 Add <span class="string">&quot;!&quot;</span></span><br><span class="line">* master   4b6999e create folder and file</span><br><span class="line">  temp     543c5d8 add <span class="built_in">test</span></span><br><span class="line">$ git branch -d temp <span class="comment">#删除temp分支 会提示我temp还没有合并 如果真的要删除使用-D</span></span><br><span class="line">error: The branch <span class="string">&#x27;temp&#x27;</span> is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run <span class="string">&#x27;git branch -D temp&#x27;</span>.</span><br><span class="line">$ git merge temp <span class="comment">#或者进行merge 这里产生了冲突 master上我rename了readme</span></span><br><span class="line">CONFLICT (modify/delete): readme deleted <span class="keyword">in</span> HEAD and modified <span class="keyword">in</span> temp. Version temp of readme left <span class="keyword">in</span> tree.</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line">$ git commit -m <span class="string">&#x27;merge branch temp&#x27;</span> <span class="comment">#解决冲突后提交合并</span></span><br><span class="line">[master 5524853] merge branch temp</span><br><span class="line">$ git branch -d temp <span class="comment">#这时候再使用-d就可以删除了</span></span><br><span class="line">Deleted branch temp (was 543c5d8).</span><br><span class="line">$ git branch -av</span><br><span class="line">  fix_add  fd98d3d Add add file</span><br><span class="line">  fix_add1 2241da2 Add <span class="string">&quot;!&quot;</span></span><br><span class="line">* master   5524853 merge branch temp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;删除不需要的分支&quot;&gt;&lt;a href=&quot;#删除不需要的分支&quot; class=&quot;headerlink&quot; title=&quot;删除不需要的分支&quot;&gt;&lt;/a&gt;删除不需要的分支&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://blog.jammelee.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>分离头指针情况下的注意事项</title>
    <link href="http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%B8%80%E7%AB%A0/8.%E5%88%86%E7%A6%BB%E5%A4%B4%E6%8C%87%E9%92%88%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%B8%80%E7%AB%A0/8.%E5%88%86%E7%A6%BB%E5%A4%B4%E6%8C%87%E9%92%88%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2019-10-21T15:13:36.000Z</published>
    <updated>2021-05-16T13:58:37.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分离头指针情况下的注意事项"><a href="#分离头指针情况下的注意事项" class="headerlink" title="分离头指针情况下的注意事项"></a>分离头指针情况下的注意事项</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 4b6999eecb60df46af36c5409e3737e44b877dd7 (HEAD -&gt; master)</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 19 13:50:07 2019 +0800</span><br><span class="line"></span><br><span class="line">    create folder and file</span><br><span class="line"></span><br><span class="line">commit 6d4192be4c570363865468870d14f59efaa5521e</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 19 13:46:22 2019 +0800</span><br><span class="line"></span><br><span class="line">    create abc</span><br><span class="line"></span><br><span class="line">commit 4d2bdddf4098e40ce57fdaf04bb862f7bea04918</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Mon Apr 29 21:36:15 2019 +0800</span><br><span class="line"></span><br><span class="line">    rename</span><br><span class="line"></span><br><span class="line">commit d34df54beffb33cf6e4f4e97d0f0e24f2b676d51 (tag: <span class="built_in">test</span>)</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Mon Apr 29 21:02:02 2019 +0800</span><br><span class="line"></span><br><span class="line">    学习工作区和暂存区</span><br><span class="line"></span><br><span class="line">commit 33f7ae4c4d4da85453ed0077670e242b71d0a621</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun Apr 28 22:19:09 2019 +0800</span><br><span class="line"></span><br><span class="line">    Add readme</span><br><span class="line">$ git checkout 6d4192 <span class="comment">#分离头指针 本意上就是指我们现在正工作在没有分支的状态下 这个时候如果产生commit或者很多变更 假设突然有个任务 有个bug要修复 需要切换到master上去修复 这个时候切换 分离头指针地方做开发的commit没有branch挂钩 就有可能被git当作垃圾清理掉</span></span><br><span class="line">Note: checking out <span class="string">&#x27;6d4192&#x27;</span>.</span><br><span class="line"></span><br><span class="line">You are <span class="keyword">in</span> <span class="string">&#x27;detached HEAD&#x27;</span> state. You can look around, make experimental</span><br><span class="line">changes and commit them, and you can discard any commits you make <span class="keyword">in</span> this</span><br><span class="line">state without impacting any branches by performing another checkout.</span><br><span class="line"></span><br><span class="line">If you want to create a new branch to retain commits you create, you may</span><br><span class="line"><span class="keyword">do</span> so (now or later) by using -b with the checkout <span class="built_in">command</span> again. Example:</span><br><span class="line"></span><br><span class="line">  git checkout -b &lt;new-branch-name&gt;</span><br><span class="line"></span><br><span class="line">HEAD is now at 6d4192b create abc</span><br><span class="line">$ vi abc <span class="comment">#修改abc文件</span></span><br><span class="line">$ git status <span class="comment">#查看当前状态 发现git会提示当前头指针没有指向任何分支 是基于6d4192b做的</span></span><br><span class="line">HEAD detached at 6d4192b</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   abc</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">$ git add -u <span class="comment">#将修改添加至暂存区</span></span><br><span class="line">$ git commit -m <span class="string">&#x27;Add hello world&#x27;</span></span><br><span class="line">[detached HEAD 4e43c01] Add hello world</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">$ git <span class="built_in">log</span> <span class="comment">#会发现head指针没有指向任何分支 这样就叫分离头指针的状态</span></span><br><span class="line">commit 4e43c01c8f3c76aedd986d598a00b90809a3a588 (HEAD)</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 19 16:33:15 2019 +0800</span><br><span class="line"></span><br><span class="line">    Add hello world</span><br><span class="line"></span><br><span class="line">commit 6d4192be4c570363865468870d14f59efaa5521e</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 19 13:46:22 2019 +0800</span><br><span class="line"></span><br><span class="line">    create abc</span><br><span class="line"></span><br><span class="line">commit 4d2bdddf4098e40ce57fdaf04bb862f7bea04918</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Mon Apr 29 21:36:15 2019 +0800</span><br><span class="line"></span><br><span class="line">    rename</span><br><span class="line"></span><br><span class="line">commit d34df54beffb33cf6e4f4e97d0f0e24f2b676d51 (tag: <span class="built_in">test</span>)</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Mon Apr 29 21:02:02 2019 +0800</span><br><span class="line"></span><br><span class="line">    学习工作区和暂存区</span><br><span class="line"></span><br><span class="line">commit 33f7ae4c4d4da85453ed0077670e242b71d0a621</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun Apr 28 22:19:09 2019 +0800</span><br><span class="line"></span><br><span class="line">    Add readme</span><br><span class="line">$ git branch -av</span><br><span class="line">* (HEAD detached from 6d4192b) 4e43c01 Add hello world</span><br><span class="line">  master                       4b6999e create folder and file</span><br><span class="line">  temp                         543c5d8 add <span class="built_in">test</span></span><br><span class="line">$ git checkout master <span class="comment">#假设这个时候接到任务 必须要到master去修复问题</span></span><br><span class="line">Warning: you are leaving 1 commit behind, not connected to</span><br><span class="line">any of your branches: <span class="comment">#git提醒你有一个commit在后边，而且没有连接你任何的分支</span></span><br><span class="line"></span><br><span class="line">  4e43c01 Add hello world</span><br><span class="line"></span><br><span class="line">If you want to keep it by creating a new branch, this may be a good time</span><br><span class="line">to <span class="keyword">do</span> so with: <span class="comment">#下边再次提醒 问你要不要为4e43c01创建一个新的分支</span></span><br><span class="line"></span><br><span class="line"> git branch &lt;new-branch-name&gt; 4e43c01</span><br><span class="line"></span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">$ gitk --all <span class="comment">#如图1 会发现找不到commit记录 证明这条commit在git看来是不重要的 就很有可能被git清理掉</span></span><br><span class="line">$ git branch fix_add 4e43c01 <span class="comment">#假设这个时候我们发现这条commit很重要 那么按照上边的提示 创建一个分支出来</span></span><br><span class="line">$ gitk --all <span class="comment">#这个时候再看 就会发现已经有了这条记录 如图2</span></span><br></pre></td></tr></table></figure><p><img src="20190519164230.png" alt="imges"></p><p><img src="20190519165124.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分离头指针情况下的注意事项&quot;&gt;&lt;a href=&quot;#分离头指针情况下的注意事项&quot; class=&quot;headerlink&quot; title=&quot;分离头指针情况下的注意事项&quot;&gt;&lt;/a&gt;分离头指针情况下的注意事项&lt;/h3&gt;&lt;figure class=&quot;highlight bash
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://blog.jammelee.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>commit、tree、blob三个对象之间的关系</title>
    <link href="http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%B8%80%E7%AB%A0/7.commit%E3%80%81tree%E3%80%81blob%E4%B8%89%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://blog.jammelee.top/2019/10/21/Git/%E7%AC%AC%E4%B8%80%E7%AB%A0/7.commit%E3%80%81tree%E3%80%81blob%E4%B8%89%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</id>
    <published>2019-10-21T15:13:06.000Z</published>
    <updated>2021-05-16T13:58:37.214Z</updated>
    
    <content type="html"><![CDATA[<h3 id="commit、tree、blob三个对象之间的关系"><a href="#commit、tree、blob三个对象之间的关系" class="headerlink" title="commit、tree、blob三个对象之间的关系"></a>commit、tree、blob三个对象之间的关系</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 4b6999eecb60df46af36c5409e3737e44b877dd7 (HEAD -&gt; master)</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 19 13:50:07 2019 +0800</span><br><span class="line"></span><br><span class="line">    create folder and file</span><br><span class="line"></span><br><span class="line">commit 6d4192be4c570363865468870d14f59efaa5521e</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun May 19 13:46:22 2019 +0800</span><br><span class="line"></span><br><span class="line">    create abc</span><br><span class="line"></span><br><span class="line">commit 4d2bdddf4098e40ce57fdaf04bb862f7bea04918</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Mon Apr 29 21:36:15 2019 +0800</span><br><span class="line"></span><br><span class="line">    rename</span><br><span class="line"></span><br><span class="line">commit d34df54beffb33cf6e4f4e97d0f0e24f2b676d51 (tag: <span class="built_in">test</span>)</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Mon Apr 29 21:02:02 2019 +0800</span><br><span class="line"></span><br><span class="line">    学习工作区和暂存区</span><br><span class="line"></span><br><span class="line">commit 33f7ae4c4d4da85453ed0077670e242b71d0a621</span><br><span class="line">Author: xxx &lt;xxx@xxx.com&gt;</span><br><span class="line">Date:   Sun Apr 28 22:19:09 2019 +0800</span><br><span class="line"></span><br><span class="line">    Add readme</span><br><span class="line">$ git cat-file -p 4b6999ee <span class="comment">#查看一下地址为4b6999ee的commit内容 发现里边有一颗树</span></span><br><span class="line">tree 283144d15658fc8307f3cc01e7c962c3959a0121</span><br><span class="line">parent 6d4192be4c570363865468870d14f59efaa5521e</span><br><span class="line">author xxx &lt;jamme_lee@outlook.com&gt; 1558245007 +0800</span><br><span class="line">committer xxx &lt;jamme_lee@outlook.com&gt; 1558245007 +0800</span><br><span class="line"></span><br><span class="line">create folder and file</span><br><span class="line">$ git cat-file -p 283144d <span class="comment">#查看tree的内容 下边存了a、abc、readme.md文件和folder文件夹</span></span><br><span class="line">100644 blob 64fa4ac5cffbaa8c5b03f26eec62ae6244f2b435a</span><br><span class="line">100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391abc</span><br><span class="line">040000 tree c32d14e3847d3a6e6f31261adfb0cb0b334beec5folder</span><br><span class="line">100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391readme.md</span><br><span class="line">$ git cat-file -p c32d14e <span class="comment">#再查看folder文件夹的tree 发现内容就是files文件的blob对象</span></span><br><span class="line">100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391files</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;commit、tree、blob三个对象之间的关系&quot;&gt;&lt;a href=&quot;#commit、tree、blob三个对象之间的关系&quot; class=&quot;headerlink&quot; title=&quot;commit、tree、blob三个对象之间的关系&quot;&gt;&lt;/a&gt;commit、tree
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://blog.jammelee.top/tags/Git/"/>
    
  </entry>
  
</feed>
